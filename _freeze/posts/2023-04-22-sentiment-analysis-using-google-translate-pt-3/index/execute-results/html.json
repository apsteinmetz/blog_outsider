{
  "hash": "4771ec84c474ad7590c3c4442be5ef29",
  "result": {
    "markdown": "---\ntitle: \"Sentiment Analysis Using Google Translate (Pt. 3 - Machine Learning)\"\ndescription: |\n\nauthor: Art Steinmetz\ndate: 2023-04-22\ndraft: false\ncategories: \n  - tidytext\n  - twitter\n  - machine learning\n  - xgboost\nformat: html\nimage: img/eda1.png\neditor: visual\nbibliography: references.bib\nexecute: \n  eval: true\n  freeze: true\n  warning: false\n---\n\n\n## Introduction\n\nIn Part 2 of this series we learned that summing the valence measurement of the words in the Afrisenti data set did not agree well with the sentiments already provided. While the sentiments we calculated made sense in general, they were measured without any knowledge of how the original sentiments were determined. For this post we will apply machine learning techniques to try to reverse engineer the thinking that went into the sentiment assignments.\n\nIn our previous analysis we were only in agreement with original data about 50% of the time. Can our trained models do any better? If we pass the tweets through Google Translate first to convert them all to English, will we improve or worsen the accuracy of the model? Let's see.\n\nWe will take the usual machine learning approach of splitting the data into test and training sets, then run a classifier model on the training set and finally validate it against the test set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages({\nlibrary(tidyverse)\nlibrary(tidytext)\nlibrary(quanteda)\nlibrary(tictoc)\nlibrary(xgboost)})\n\n\n# set up some chart defaults\ntan1 <- \"#FDECCD\"\nyellow1 <- \"#FFBF00\"\ngreen1 <- \"#007000\"\n\ntheme_afri <- function(...){\n  # making a function allows passing further theme elements\n  ggplot2::theme(\n    plot.background = element_rect(fill = tan1, color = NA),\n    panel.background = element_blank(),\n    legend.background = element_blank(),\n    legend.box.background = element_blank(),\n    legend.key = element_blank(),\n    ...\n    ) \n}\n# the the previously translated tweets.\nafrisenti_translated <- readr::read_csv('https://raw.githubusercontent.com/apsteinmetz/tidytuesday/master/2023-02-28_african_language/data/afrisenti_translated.csv',\n                                        show_col_types = FALSE) |>\n  mutate(lang = as.factor(assigned_long)) |> \n  mutate(sentiment = as.factor(label)) |> \n  mutate(intended_use = as.factor(intended_use)) |> \n  select(lang,tweet_num,sentiment,translatedText,tweet,intended_use)\nafrisenti_translated\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 111,720 × 6\n   lang    tweet_num sentiment translatedText                 tweet intended_use\n   <fct>       <dbl> <fct>     <chr>                          <chr> <fct>       \n 1 Amharic         1 negative  Amhara region needs moderatio… አማራ … dev         \n 2 Amharic         2 negative  Having a mood in a way that a… ሰውን … dev         \n 3 Amharic         3 negative  Domestic violence - without h… የቤት … dev         \n 4 Amharic         4 negative  Ethiopia, what was your role … Ethi… dev         \n 5 Amharic         5 negative  No matter how Oromo learns, t… ኦሮሞ … dev         \n 6 Amharic         6 negative  Tish, dark powder, are you st… ቲሽ ጨ… dev         \n 7 Amharic         7 negative  Local residents said that the… በምዕራ… dev         \n 8 Amharic         8 negative  What happened to Schimmels is… ያየሰው… dev         \n 9 Amharic         9 negative  An unstable country does not … ያልተረ… dev         \n10 Amharic        10 negative  The idiot and the bubble, the… ደደቡ … dev         \n# ℹ 111,710 more rows\n```\n:::\n:::\n\n\n## Explore the Data Set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(afrisenti_translated)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      lang         tweet_num         sentiment     translatedText    \n Hausa  :22152   Min.   :     1   negative:36564   Length:111720     \n Igbo   :15715   1st Qu.: 27931   neutral :39151   Class :character  \n Yoruba :15127   Median : 55861   positive:36005   Mode  :character  \n Arabic :12061   Mean   : 55861                                      \n English:10556   3rd Qu.: 83790                                      \n Amharic: 9480   Max.   :111720                                      \n (Other):26629                                                       \n    tweet           intended_use \n Length:111720      dev  :13728  \n Class :character   test :34307  \n Mode  :character   train:63685  \n                                 \n                                 \n                                 \n                                 \n```\n:::\n:::\n\n\nThe data set is already tagged into training, test and \"dev\" sets. The training set is twice the size of the test set. What is \"dev?\" I don't know if this split is random or not but we are concerned whether the profile of the training set is similar to the test set. Let's split it according to the tags.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntweet_train <- afrisenti_translated |> \n  filter(intended_use == \"train\") |> \n  select(tweet_num,sentiment,lang,tweet,translatedText)\n\ntweet_test <- afrisenti_translated |> \n  filter(intended_use == \"test\") |> \n  select(tweet_num,sentiment,lang,tweet,translatedText)\n\ntweet_dev <- afrisenti_translated |> \n  filter(intended_use == \"dev\") |> \n  select(tweet_num,sentiment,lang,tweet,translatedText)\n```\n:::\n\n\nNow we'll see if the training set is representative of the test set. Do the languages align?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nafrisenti_translated |> \nggplot(aes(lang,group=intended_use)) + \n   geom_bar(aes(y = after_stat(prop)),fill = yellow1) + \n          scale_y_continuous(labels=scales::percent) +\n  theme_afri(axis.text.x = element_text()) +\n  coord_flip() +\n  facet_grid(~intended_use) + \n  labs(title = \"Splits Are Reasonably Aligned by Language\",\n       y = \"Proportion\", x= \"Language\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/eda1-1.png){width=672}\n:::\n:::\n\n\nLooks okay.\n\nDo the sentiments align?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nafrisenti_translated |> \nggplot(aes(sentiment,group=intended_use)) + \n   geom_bar(aes(y = after_stat(prop)),fill=yellow1) + \n          scale_y_continuous(labels=scales::percent) +\n  theme_afri(axis.text.x = element_text()) +\n  facet_grid(~intended_use) + \n  coord_flip() + \n  labs(title = \"Splits Are Balanced by Sentiment\",\n       y = \"Proportion\", x= \"Sentiment\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/eda2-1.png){width=672}\n:::\n:::\n\n\nThe splits are well balanced.\n\n## Approach to the Problem\n\nThe structure of our model is basically a regression with one dependent variable and thousands of independent variables which are all of the words (\"tokens\") in all the tweets. This is a \"document feature matrix\" (*DFM*). What goes in the cells of the matrix? One approach would simply code each of the words by their presence or absence in the tweet. A more nuanced approach is to code each word in each tweet by how important it is in the tweet. [\"*tf-idf*\"](https://www.tidytextmining.com/tfidf.html), is sort of a uniqueness measure. This has the added benefit of down-ranking stop words that appear very frequently all over the place, even if we have no stop-word lexicon for a certain language.\n\nThere are several machine learning models we might try. There are two R packages suitable for classifiers where there are more than two categores that also work with sparse matrices (see below), `ranger` and `xgboost`. In preview, we will use `xgboost` here because the results are about same but `xgboost` is much faster. Here is a short comparison of [different machine learning approaches](https://arxiv.org/ftp/arxiv/papers/2101/2101.06353.pdf) to sentiment analysis.[@Saifullah2021]\n\n::: callout-note\n## Why not tidymodels?\n\nI set out to use RStudio's suite of machine learning workflow packages, `tidymodels`, in this project, but quickly became frustrated. I could not get the wrapper around `xgboost` to give a sensible result (it's probably my fault) and there is a bug in the wrapper around `ranger` that prevents making predictions with the model. So we'll do it the old-fashioned way.\n:::\n\n## Pre-Processing.\n\nThere are some things we can to do boost our chances of a satisfying outcome. As noted above we're going to build a matrix with the tweet numbers, an arbitrary index to uniquely identify each tweet (\"document\"), as the rows, and each word in every tweet (\"feature\") as the columns. This will create a \"document feature matrix.\"\n\nBefore we create the matrix, we first split all the tweets into individual words (\"tokens\") and refine that list to make it more managable. Let's create a few functions to help us with this.\n\nWhat do we do when a negation flips the sentiment of a tweet? \"I Love\" is positive but \"I do not love\" is negative. In our previous post we tried sentence-level analysis to handle negation. Here we are doing word level training. We will address this by creating new tokens where any instance of, say \"not love\" is replaced by \"not_love,\" an entirely new word for our analysis. This is very crude and only includes English (9% of the tweets), but it's something. It's actually simpler to do use the `str_replace_all(tweet,\"not |no \",\"not_\")` function to do this before we tokenize the tweets.\n\nWhen we measured the tweets using a sentiment lexicon, only the words in the lexicon contributed to the sentiment measurement. Everything else was neutral. With machine learning everything counts and the more words we have, the bigger the model and the longer it will take to train. It is common in analyzing text to drop low-information words or \"stop words.\" In English, we drop words like \"the\" and \"that.\" We want to build a list of stop words relevant to our data set. On Kaggle I found a list of [stop words in various African languages](https://www.kaggle.com/datasets/rtatman/stopword-lists-for-african-languages). It doesn't cover every language in our data set but will reduce the matrix size a bit. We'll add that to the lexicon of English stop words and a custom lexicon built from a quick inspection of the data set. In practice, the *tf-idf* score is the biggest indicator of a low-information word, irrespective of language.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstop_words_af <- readr::read_csv('https://raw.githubusercontent.com/apsteinmetz/tidytuesday/master/data/stopwords_af.csv', show_col_types = FALSE)\n\n# add my stop words to defaults\nmy_stop_words = tibble(word = c(\"http\",\"https\",\"dey\",\"de\",\"al\",\"url\",\"na\",\"t.co\",\"rt\",\"user\",\"users\",\"wey\",\"don\",\n                                as.character(1:100)))\n                           \n\n# make a stopword list of any 1-character words\n# this is a somewhat arbitrary rubric for African language stop words\nstop_words_1char <- afrisenti_translated |> \n  unnest_tokens(word,tweet) |> \n  select(word) |> \n  filter(str_length(word)<2) |> \n  unique()\n\nfull_stop_words <-  c(\n  tidytext::stop_words$word,\n  my_stop_words$word,\n  stop_words_af$word,\n  stop_words_1char$word\n) |> \n  enframe(value = \"word\")\n\nremove_stopwords <- function(tokens) {\n  tokens |>\n    # remove stop words\n    anti_join(full_stop_words)\n}\n```\n:::\n\n\nDid we say every word? Well, not EVERY word. 260,000 is more than we can handle so let's create a helper function to prune the data set to only the words with the highest frequency.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nonly_top_words <- function(tokens, word_count = 2000) {\n  chosen_words <- tokens |>\n    ungroup() |>\n    select(word) |>\n    count(word) |>\n    slice_max(order_by = n, n = word_count) |> \n    select(-n)\n  return(inner_join(tokens,chosen_words))\n}\n```\n:::\n\n\nEven after pruning there are over 2,000 unique words in this set of tweets. 2,000 variables and over 110,000 tweets. That's a pretty big matrix, over 120 million elements, but the vast majority of those elements are filled with zero. We can make the memory size of this monster manageable by using a [\"sparse matrix.\"](https://www.tidyverse.org/blog/2020/11/tidymodels-sparse-support/) Such a matrix describes what elements are empty without actually populating them. Fortunately both `ranger` and `xgboost` understand sparse matrices.\n\nThe function `make_dfm` is our workhorse. It takes the raw tweet data and turns it into sparse document feature matrix after applying our pre-processing steps. Note that the matrix does not contain our independent variable, \"sentiment.\" That is a separate vector we attach to the matrix as a `docvar`, part of a `quanteda::dfm` object.\n\nNote the order of our pre-processing matters. First we create negation tokens, then we prune stop words, then we compute the *tf-idf* and finally we take the top words. By trial and error I learned that computing each word's *tf-idf* against the whole data set before choosing the top words yields a better result. Spoiler alert: around 2000 words is the sweet spot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make sparse document-feature matrix\n\nmake_dfm <- function(tweet_data, translated = FALSE, num_words = 1000) {\n    if (translated) {\n      tweet_tokens <- tweet_data |>\n        mutate(translatedText = str_replace_all(translatedText, \"no |not \", \"not_\")) |>\n        select(tweet_num, translatedText) |>\n        unnest_tokens(word, translatedText)\n    } else{\n      tweet_tokens <- tweet_data |>\n        mutate(tweet = str_replace_all(tweet, \"no |not \", \"not_\")) |>\n        select(tweet_num, tweet) |>\n        unnest_tokens(word, tweet)\n    }\n    tweet_tokens <- tweet_tokens |> \n  remove_stopwords() |>\n  count(tweet_num, word) |>\n  bind_tf_idf(word, tweet_num, n) |>\n  only_top_words(num_words) |>\n  select(tweet_num, word, tf_idf)\n\nsentiment_subset <- tweet_tokens |> \n  slice_head(n=1,by=tweet_num) |> \n  left_join(tweet_data) |> \n  pull(sentiment)\n\ntweet_dfm <- cast_dfm(tweet_tokens,tweet_num,word,tf_idf)\n# add dependent variable to sparse matrix\ndocvars(tweet_dfm,\"sentiment\") <- sentiment_subset\n\nreturn(tweet_dfm)\n}\n```\n:::\n\n\n## Train on African Language Tweets\n\nWe'll establish a baseline by training a model on the African-language tweets.\n\nNote that we don't care what language the token is. It could be any language or no language. It could be an emoji, as long as it is associated with a sentiment. There is a risk that the same word could convey the opposite sentiment in two different languages but I assume it is rare enough to ignore.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# more words in common in the translated word list\ntranslated = FALSE\ntweet_train_dfm <- make_dfm(tweet_train,translated = translated,num_words = 2000)\ntweet_test_dfm <- make_dfm(tweet_test,translated = translated,num_words = 2000)\n```\n:::\n\n\nHow sparse is the training *DFM*? 99.8% of the the entries are zero.\n\nAfter creating *DFM*s for both training and testing we see that the *DFM*s have about 3/4 of the words in common so there is a good bit of information for prediction out-of-sample.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# how close are the word lists?}\n# more words in common in the translated word list\ninner_join(enframe(dimnames(tweet_train_dfm)[[2]]),\n           enframe(dimnames(tweet_test_dfm)[[2]]),\n           by = \"value\") |> nrow() |> paste(\"Words in both train and test sets\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1508 Words in both train and test sets\"\n```\n:::\n:::\n\n\nRunning predictions on a test set requires the feature list of the training and test set be the same. Three quarters, but not all, of the tokens overlap in our *DFM*s. The `dfm_match` function will ensure the test set features are congruent with the training set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make sure test set has all variables in both train and test sets\ntweet_test_dfm <- dfm_match(tweet_test_dfm, \n                      features = featnames(tweet_train_dfm))\n```\n:::\n\n\nWe will use the gradient boosted tree approach to training our model. An excellent introduction to the theory is contatined in the [documentation to the `xgboost` package](https://xgboost.readthedocs.io/en/stable/tutorials/model.html), which is available for many languages, by the way.\n\nThis is a supervised model, meaning we know all the possible predictions ahead of time. In this case, \"negative,\" \"neutral\" and \"positive.\" A slight \"gotcha\" is `xgboost` requires numeric classifiers, with the first one as \"0.\" As such, we convert our dependent variable, which is a factor, to numeric and then covert it back after predicting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# run the models\ntic()\nxg_fit <- xgboost(\n  data = tweet_train_dfm,\n  max.depth = 100,\n  nrounds = 100,\n  objective = \"multi:softmax\",\n  num_class = 3,\n  label = as.numeric(tweet_train_dfm$sentiment)-1,\n  print_every_n = 10\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]\ttrain-mlogloss:0.984030 \n[11]\ttrain-mlogloss:0.664378 \n[21]\ttrain-mlogloss:0.579607 \n[31]\ttrain-mlogloss:0.530083 \n[41]\ttrain-mlogloss:0.493999 \n[51]\ttrain-mlogloss:0.465732 \n[61]\ttrain-mlogloss:0.441981 \n[71]\ttrain-mlogloss:0.422400 \n[81]\ttrain-mlogloss:0.404571 \n[91]\ttrain-mlogloss:0.389673 \n[100]\ttrain-mlogloss:0.377797 \n```\n:::\n\n```{.r .cell-code}\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n61.94 sec elapsed\n```\n:::\n:::\n\n\n## Results With Native Language Tweets\n\nIn the interest of space, we won't go over tuning the model or cross validation, both of which are used to optimize performance. I played around with the parameters of the model and settled on the ones used here as roughly optimal. If we plot the loss function below we see the diminishing marginal return to additional training rounds. Adding more rounds continues to improve the fit to the training set (in theory we would ultimately achieve a perfect fit) but the fit to the test set doesn't improve at all.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxg_fit$evaluation_log |> \n  ggplot(aes(iter,train_mlogloss)) + geom_line() +\n  theme_afri()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot native loss-1.png){width=672}\n:::\n:::\n\n\nAlas, the accuracy of our machine learning model is not much better than our simple valence measurements from the last post.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# predict and convert classes back to factors\npredicted <- predict(xg_fit,tweet_test_dfm) |> \n  as.factor()\nlevels(predicted) <- levels(tweet_test$sentiment)\n\npredicted_for_table <- tibble(actual = tweet_test_dfm$sentiment,\n                              predicted)\n\n\ncaret::confusionMatrix(table(predicted_for_table))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          predicted\nactual     negative neutral positive\n  negative     5524    4598     1261\n  neutral      2489    7011     1182\n  positive     2100    3287     4981\n\nOverall Statistics\n                                          \n               Accuracy : 0.5401          \n                 95% CI : (0.5346, 0.5455)\n    No Information Rate : 0.4593          \n    P-Value [Acc > NIR] : < 2.2e-16       \n                                          \n                  Kappa : 0.3095          \n                                          \n Mcnemar's Test P-Value : < 2.2e-16       \n\nStatistics by Class:\n\n                     Class: negative Class: neutral Class: positive\nSensitivity                   0.5462         0.4707          0.6709\nSpecificity                   0.7375         0.7907          0.7846\nPos Pred Value                0.4853         0.6563          0.4804\nNeg Pred Value                0.7820         0.6375          0.8893\nPrevalence                    0.3118         0.4593          0.2289\nDetection Rate                0.1703         0.2162          0.1536\nDetection Prevalence          0.3510         0.3294          0.3197\nBalanced Accuracy             0.6419         0.6307          0.7278\n```\n:::\n:::\n\n\n## Train on English Translated Tweets\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# more words in common in the translated word list\ntranslated = TRUE\ntweet_train_dfm <- make_dfm(tweet_train,translated = translated,num_words = 2000)\ntweet_test_dfm <- make_dfm(tweet_test,translated = translated,num_words = 2000)\n```\n:::\n\n\nNow how many words are shared among the training and test sets? If there is a case to be made for a better outcome with the translated tweets, this is it. We have more words in common across the training and test sets since, by converting 13 languages to 1, we have fewer unique words and thus more information in each word. In practice this doesn't make much of a difference. There are less than 200 additional words in common. Surprising.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# how close are the word lists?}\n# more words in common in the translated word list\ninner_join(enframe(dimnames(tweet_train_dfm)[[2]]),\n           enframe(dimnames(tweet_test_dfm)[[2]]),\n           by = \"value\") |> nrow() |> paste(\"Words in both train and test sets\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1678 Words in both train and test sets\"\n```\n:::\n:::\n\n\nOnce again we match the features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make sure test set has all variables in both train and test sets\ntweet_test_dfm <- dfm_match(tweet_test_dfm, \n                      features = featnames(tweet_train_dfm))\n```\n:::\n\n\nWe will use the same model parameters as we did with the native tweets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# run the models\ntic()\nxg_fit <- xgboost(\n  data = tweet_train_dfm,\n  max.depth = 100,\n  nrounds = 100,\n  objective = \"multi:softmax\",\n  num_class = 3,\n  label = as.numeric(tweet_train_dfm$sentiment)-1,\n  print_every_n = 10\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]\ttrain-mlogloss:1.000106 \n[11]\ttrain-mlogloss:0.721196 \n[21]\ttrain-mlogloss:0.647356 \n[31]\ttrain-mlogloss:0.604540 \n[41]\ttrain-mlogloss:0.573208 \n[51]\ttrain-mlogloss:0.548874 \n[61]\ttrain-mlogloss:0.528251 \n[71]\ttrain-mlogloss:0.511289 \n[81]\ttrain-mlogloss:0.495794 \n[91]\ttrain-mlogloss:0.482234 \n[100]\ttrain-mlogloss:0.470904 \n```\n:::\n\n```{.r .cell-code}\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n58.2 sec elapsed\n```\n:::\n:::\n\n\nThe loss function looks the same\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxg_fit$evaluation_log |> \n  ggplot(aes(iter,train_mlogloss)) + geom_line() + \n  theme_afri()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Results With English Language Tweets\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# predict and convert classes back to factors\npredicted <- predict(xg_fit,tweet_test_dfm) |> \n  as.factor()\nlevels(predicted) <- levels(tweet_test$sentiment)\n\npredicted_for_table <- tibble(actual = tweet_test_dfm$sentiment,\n                              predicted)\n\n\ncaret::confusionMatrix(table(predicted_for_table))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          predicted\nactual     negative neutral positive\n  negative     5678    4146     1432\n  neutral      2233    6607     1483\n  positive     1905    3245     5178\n\nOverall Statistics\n                                          \n               Accuracy : 0.5473          \n                 95% CI : (0.5418, 0.5528)\n    No Information Rate : 0.4387          \n    P-Value [Acc > NIR] : < 2.2e-16       \n                                          \n                  Kappa : 0.3217          \n                                          \n Mcnemar's Test P-Value : < 2.2e-16       \n\nStatistics by Class:\n\n                     Class: negative Class: neutral Class: positive\nSensitivity                   0.5784         0.4720          0.6398\nSpecificity                   0.7475         0.7925          0.7837\nPos Pred Value                0.5044         0.6400          0.5014\nNeg Pred Value                0.7996         0.6576          0.8649\nPrevalence                    0.3076         0.4387          0.2536\nDetection Rate                0.1780         0.2071          0.1623\nDetection Prevalence          0.3528         0.3235          0.3237\nBalanced Accuracy             0.6630         0.6323          0.7118\n```\n:::\n:::\n\n\n## Conclusion\n\nAgain, we see a disappointing result. Machine learning did not significantly increase the accuracy of our sentiment measurement. It is interesting that translating the tweets to English DOES improve the model accuracy, but by a puny amount. I'm not sure the conclusion would survive cross-validation. Here's the summary for all the methods we've done.\n\n|                 | Valence by Word | Valence by Sentence | XGBoost - Native | XGBoost - English |\n|--------------:|:-------------:|:-------------:|:-------------:|:-------------:|\n|        Accuracy |       51%       |         51%         |       54%        |        55%        |\n| Kappa Statistic |       26%       |         27%         |       31%        |        32%        |\n\nObviously, we're doing \"toy\" models. Serious researchers on this subject have achieved better results. In particular, a model called \"AfroXLMR-Large\" cited in the [original paper](https://arxiv.org/pdf/2302.08956.pdf) [@Muhammad2023AfriSentiAT] achieved an average accuracy across all languages of 67.2% on this data set. This is a pre-trained model with over 270 million variables.\n\nHopefully this was useful as a introduction to some of the techniques used in sentiment analysis and the R tools we can use for the task.\n\nIn the final post in this series we'll look at something of more general interest. There has been much talk about how the \"Global South\" feels neglected by the rich countries in the northern hemisphere. Can we use the sentiments expressed in the Afrisenti data set to get feelings about specific regions?\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}