{
  "hash": "e753e7c12c1dccbf63ac01ce5262d005",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"The Truth About Tidy Wrappers\"\ndescription: Are Tidyverse wrappers around powerful database engines really worth it?\n  \nauthor: Art Steinmetz\ndate: 2024-03-10\ndraft: false\nformat:\n   html:\n      code-fold: true\nexecute:\n  echo: true\n  freeze: true\neditor: source\ncomments: \n  utterances:\n    repo: apsteinmetz/blog_outsider\n    label: wrappers\n---\n\n\nThese are the packages we will need for this analysis.\n\n``` r\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(dtplyr)\nlibrary(duckdb)\nlibrary(duckplyr)\nlibrary(polars)\nlibrary(tidypolars)\nlibrary(arrow)\nlibrary(tictoc)\nlibrary(microbenchmark)\nlibrary(gt)\n```\n\n\n::: {.cell}\n\n:::\n\n\n## The Tidyverse\n\nI love the **Tidyverse** from [Posit.co](https://posit.co/). The biggest evolution of the R language ecosystem since its inception was the introduction of **dplyr** and, subsequently, dozens of related packages. **dplyr** established what is, in effect, a new vernacular for manipulating data frames that is supremely readable. This is not welcome by everyone as verbosity is preferred in the Tidyverse over conciseness. Consider two snippets of code that summarize a column of numbers, the first in base R and the second using dplyr.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# base R\ndo_base <- function(df) {\n   agg_lines <- aggregate(temp ~ city, data = df,\n                          FUN = function(x) c(avg=mean(x),high=max(x),low=min(x)))\n   # convert matrix column to data frame columns\n   cbind(city=agg_lines$city,as.data.frame(agg_lines$temp))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# dplyr \ndo_dplyr <- function(df) {\n   df |>\n      as.data.frame() |>\n      group_by(city) |>\n      summarize(high = max(temp), low = min(temp), avg = mean(temp))\n   }\n```\n:::\n\n\nThe first example is hard to decipher while the second is quite understandable without even knowing what the purpose of the function is. As it happens, **dplyr** is also usually faster than base R by a fair amount.\n\n## The Need for Speed\n\nAs we start working with larger and larger datasets, the basic tools of the tidyverse start to look a little slow. In the last few years several packages more suited to large datasets have emerged. Some of these are column, rather than row, oriented. Some use parallel processing. Some are vector optimized. Speedy databases that have made their way into the R ecosystem are **data.table**, **arrow**, **polars** and **duckdb**. All of these are available for Python as well. Each of these carries with it its own interface and learning curve. **duckdb**, for example is a dialect of SQL, an entirely different language so our **dplyr** code above has to look like this in SQL:\n\n``` r\nresult <- dbGetQuery(\n         con,\n         \"SELECT city, AVG(temp) as avg, MIN(temp) as low, MAX(temp) as high FROM duck_df GROUP BY city\")\n```\n\nIt's pretty readable but if you don't know the lingo, translating will slow you down. Fear not! Help is at hand. Everyone of these database packages has a **dplyr** vernacular wrapper. This is a huge convenience. You can write the readable **dplyr** code and it just works. Switching between and testing all of these databases requires only minor changes in your code.\n\n::: callout-note\nFuture code snippets in this article are hidden by default. Click on the \"Code\" button wherever you see it to make source code visible.\n:::\n\nWhen looking at these alt-databases you may be tempted to simply ask \"which is fastest?\" This is not a simple question. The answer will depend on the size of the dataset, the nature of the manipulations, and the hardware you are using. You can get a sense of the relative speeds by looking at [these comprehensive benchmarks](https://duckdblabs.github.io/db-benchmark/).\n\nIf you want to continue to use the **tidyverse** vernacular, the question changes. **It's not \"which is fastest,\" but \"which is fastest using the dplyr syntax?\"** The answer, as it turns out, is very different for the second question.\n\nThe **dplyr** wrappers are not a free lunch. There are two sources of overhead that mean the **dplyr** code should be slightly slower than using the native interface. First, the dataset, which might start out as a typical R data frame, must be converted into the target database format. Second, some time must be taken to convert the **dplyr** code to the target database code. Obviously, if your dataset is already in the file format of the database package, the first issue goes away.\n\nIn this experiment we will address three questions.\n\n1.  How much faster (if at all) are the \"alt-database\" packages than the Tidyverse **dplyr** package. We use the native data frame format throughout the pipeline.\n2.  How much of a performance hit do we take if we use the Tidyverse wrappers to analyze alt-database data sets, still using the native format.\n3.  Suppose we want to work with Tidyverse R data frames (e.g. **tibbles**). Do the alt-database engines still give us a speed benefit if we include the time to convert **tibble**s into an alt-database format before doing typical manipulations.\n\nThe inspiration for this project came from the \"Billion Row Challenge,\" [proposed by Gunnar Morling](https://www.morling.dev/blog/one-billion-row-challenge/), to see how fast a Java program can aggregate one billion rows of data. Here, we are not interested in absolute speed, but relative speed among different approaches. 100 million rows should be reasonable for a typical laptop setup. This works out to be a 1.5 GB dataset. We will handle the dataset as one object. If we were optimizing for speed, chopping the data into chunks for parallel processing would be something to try (but see the discussion of **polars**, below).\n\nAs a cautionary note, the manipulations we are doing, grouping and summarizing, may or may not show off any particular approach to its best advantage. Your mileage may vary. Feel free to quibble.\n\n## Make the Data Set\n\nLet's start by creating the dummy data set, a list of temperature observations for World cities. The core will be actual mean annual temperature for about 400 cities from Wikipedia. Save this data for re-use. Then we randomly add observations around the mean, up to the desired size, 100 million in this case. It's all fake data, anyway. First, scrape the cities and temperatures from Wikipedia. Be aware that Wikipedia page layouts change frequently so what worked today (March, 2024) might not work tomorrow.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (fs::file_exists('data/weather_stations.csv')){\n   city_table <- read_csv(\"data/weather_stations.csv\",\n                          show_col_types = FALSE)\n} else {\n   # retrieve table from https://en.wikipedia.org/wiki/List_of_cities_by_average_temperature using rvest package\n   continents <- \"\"\n   url <-\n      \"https://en.wikipedia.org/wiki/List_of_cities_by_average_temperature\"\n   webpage <- read_html(url)\n   city_table <- html_nodes(webpage, \"table\") %>%\n      html_table(fill = TRUE) %>%\n      bind_rows() |>\n      as_tibble() |>\n      select(-Ref.) |>\n      # remove all numbers in parentheses from all columns using across() and str_remove()\n      mutate(across(everything(), \\(x) str_remove_all(x, \"\\\\(.*\\\\)\"))) |>\n      # mutate to numeric all columns except City and Country\n      mutate(across(-c(City, Country), as.numeric)) |>\n      # remove all rows with NA values\n      drop_na()\n   # write the table to a csv file\n   write_csv(city_table, \"data/weather_stations.csv\")\n}\n```\n:::\n\n\nIts easy to generate 100 million random observations based on the city name and average temperature. You don't need to use real city names, but it's fun to do so. You could make up anything.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define function to generate weather station data\n\ngenerate_observations <- function(n){\n   rownum <- sample(nrow(city_table), n, replace = TRUE)\n   city <- city_table$City[rownum]\n   obs_temp <- rnorm(n, mean = city_table$Year[rownum], sd = 10)\n   return(tibble(city = city, temp = round(obs_temp, 1)))\n}\n\ntidy_df <- generate_observations(num_records)\n```\n:::\n\n\nNow we can process this data set using each of the database packages using both the native interface and the **dplyr** wrapper. We want to know which database is fastest and what the performance loss is from using the wrapper. First let's establish that base R is not in the running by comparing it to the default of **dplyr**, using the code already shown above and a subset of the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#quicky function to clean up benchmark results.  Show only median seconds to process.\nqbench <- function(mb_result,round=2){\n   # extract the median time in seconds\n   mb_result |> \n      group_by(expr) |>\n      summarize(seconds = round(median(time)/1e9,round))\n}\nmicrobenchmark(do_base(tidy_df[1:1e7,]),do_dplyr(tidy_df[1:1e7,]),times = 3,unit = \"seconds\") |> \n   qbench() |> \n   gt()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"gfgzqnqmim\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#gfgzqnqmim table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#gfgzqnqmim thead, #gfgzqnqmim tbody, #gfgzqnqmim tfoot, #gfgzqnqmim tr, #gfgzqnqmim td, #gfgzqnqmim th {\n  border-style: none;\n}\n\n#gfgzqnqmim p {\n  margin: 0;\n  padding: 0;\n}\n\n#gfgzqnqmim .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#gfgzqnqmim .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#gfgzqnqmim .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#gfgzqnqmim .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#gfgzqnqmim .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#gfgzqnqmim .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#gfgzqnqmim .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#gfgzqnqmim .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#gfgzqnqmim .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#gfgzqnqmim .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#gfgzqnqmim .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#gfgzqnqmim .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#gfgzqnqmim .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#gfgzqnqmim .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#gfgzqnqmim .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#gfgzqnqmim .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#gfgzqnqmim .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#gfgzqnqmim .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#gfgzqnqmim .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gfgzqnqmim .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#gfgzqnqmim .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#gfgzqnqmim .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#gfgzqnqmim .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gfgzqnqmim .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#gfgzqnqmim .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#gfgzqnqmim .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#gfgzqnqmim .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gfgzqnqmim .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#gfgzqnqmim .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#gfgzqnqmim .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#gfgzqnqmim .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#gfgzqnqmim .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#gfgzqnqmim .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gfgzqnqmim .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#gfgzqnqmim .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gfgzqnqmim .gt_left {\n  text-align: left;\n}\n\n#gfgzqnqmim .gt_center {\n  text-align: center;\n}\n\n#gfgzqnqmim .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#gfgzqnqmim .gt_font_normal {\n  font-weight: normal;\n}\n\n#gfgzqnqmim .gt_font_bold {\n  font-weight: bold;\n}\n\n#gfgzqnqmim .gt_font_italic {\n  font-style: italic;\n}\n\n#gfgzqnqmim .gt_super {\n  font-size: 65%;\n}\n\n#gfgzqnqmim .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#gfgzqnqmim .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#gfgzqnqmim .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#gfgzqnqmim .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#gfgzqnqmim .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#gfgzqnqmim .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#gfgzqnqmim .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"expr\">expr</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"seconds\">seconds</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"expr\" class=\"gt_row gt_center\">do_base(tidy_df[1:1e+07, ])</td>\n<td headers=\"seconds\" class=\"gt_row gt_right\">3.09</td></tr>\n    <tr><td headers=\"expr\" class=\"gt_row gt_center\">do_dplyr(tidy_df[1:1e+07, ])</td>\n<td headers=\"seconds\" class=\"gt_row gt_right\">0.37</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n**dplyr** is much faster than base R. How does that stack up against the competition?\n\n## data.table\n\nFirst up is the venerable **data.table** and the Tidyverse companion **dtplyr**. This has been around a long time and is the R community's first choice when speed is needed. The key to **data.table**'s speed is adding a `key` to the data set. This makes grouping and rowwise lookups more efficient. The **dtplyr** package wraps it with **dplyr** syntax. If we are working with **data.table** objects throughout our workflow we an also see the performance effect of code translation when using **dplyr** verbs.\n\nIn the benchmark timings, the first row includes the time taken to convert a **tibble** to a **data.table** and then using the **dplyr** verbs from **dtplyr**. The second row is the time taken to process a **data.table** natively. The third row is the time taken to run the **dtplyr** code on a native **data.table**. Finally, as a control, we see the time taken to run the **dplyr** code on a **tibble** in the fourth row.\n\nNote we are using \"lazy\" evalutation, which is another differentiator for **data.table**. We accumulate all the query operations and run them only when `collect()` is called.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndo_data.table <- function(df = tidy_df, force_tidy = FALSE) {\n   if (\"data.table\" %in% class(df)) {\n      if (!force_tidy) {\n         df[, .(\n            high = max(temp),\n            low = min(temp),\n            avg = mean(temp)\n         ), by = city] |> \n            collect()\n      } else {\n         df %>% \n            group_by(city) |>\n            summarize(\n               high = max(temp),\n               low = min(temp),\n               avg = mean(temp)\n            ) |> collect()\n      }\n   } else{\n      df |>\n         as.data.table() |>\n         lazy_dt(immutable = FALSE) |>\n         group_by(city) |>\n         summarize(\n            high = max(temp),\n            low = min(temp),\n            avg = mean(temp)\n\n         ) |>\n         collect()\n   }\n}\n\nDT_df <- as.data.table(tidy_df,key = \"city\") |> lazy_dt(immutable = FALSE)\nbm_dt <-microbenchmark(do_data.table(tidy_df),\n               do_data.table(DT_df,force_tidy = FALSE),\n               do_data.table(DT_df,force_tidy = TRUE), \n               do_dplyr(tidy_df),times= 3,unit=\"seconds\")\nqbench(bm_dt) |> gt()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"xduzyvtsyu\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#xduzyvtsyu table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#xduzyvtsyu thead, #xduzyvtsyu tbody, #xduzyvtsyu tfoot, #xduzyvtsyu tr, #xduzyvtsyu td, #xduzyvtsyu th {\n  border-style: none;\n}\n\n#xduzyvtsyu p {\n  margin: 0;\n  padding: 0;\n}\n\n#xduzyvtsyu .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#xduzyvtsyu .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#xduzyvtsyu .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#xduzyvtsyu .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#xduzyvtsyu .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#xduzyvtsyu .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#xduzyvtsyu .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#xduzyvtsyu .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#xduzyvtsyu .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#xduzyvtsyu .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#xduzyvtsyu .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#xduzyvtsyu .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#xduzyvtsyu .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#xduzyvtsyu .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#xduzyvtsyu .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#xduzyvtsyu .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#xduzyvtsyu .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#xduzyvtsyu .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#xduzyvtsyu .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#xduzyvtsyu .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#xduzyvtsyu .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#xduzyvtsyu .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#xduzyvtsyu .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#xduzyvtsyu .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#xduzyvtsyu .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#xduzyvtsyu .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#xduzyvtsyu .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#xduzyvtsyu .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#xduzyvtsyu .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#xduzyvtsyu .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#xduzyvtsyu .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#xduzyvtsyu .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#xduzyvtsyu .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#xduzyvtsyu .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#xduzyvtsyu .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#xduzyvtsyu .gt_left {\n  text-align: left;\n}\n\n#xduzyvtsyu .gt_center {\n  text-align: center;\n}\n\n#xduzyvtsyu .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#xduzyvtsyu .gt_font_normal {\n  font-weight: normal;\n}\n\n#xduzyvtsyu .gt_font_bold {\n  font-weight: bold;\n}\n\n#xduzyvtsyu .gt_font_italic {\n  font-style: italic;\n}\n\n#xduzyvtsyu .gt_super {\n  font-size: 65%;\n}\n\n#xduzyvtsyu .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#xduzyvtsyu .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#xduzyvtsyu .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#xduzyvtsyu .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#xduzyvtsyu .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#xduzyvtsyu .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#xduzyvtsyu .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"expr\">expr</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"seconds\">seconds</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"expr\" class=\"gt_row gt_center\">do_data.table(tidy_df)</td>\n<td headers=\"seconds\" class=\"gt_row gt_right\">3.89</td></tr>\n    <tr><td headers=\"expr\" class=\"gt_row gt_center\">do_data.table(DT_df, force_tidy = FALSE)</td>\n<td headers=\"seconds\" class=\"gt_row gt_right\">1.89</td></tr>\n    <tr><td headers=\"expr\" class=\"gt_row gt_center\">do_data.table(DT_df, force_tidy = TRUE)</td>\n<td headers=\"seconds\" class=\"gt_row gt_right\">1.85</td></tr>\n    <tr><td headers=\"expr\" class=\"gt_row gt_center\">do_dplyr(tidy_df)</td>\n<td headers=\"seconds\" class=\"gt_row gt_right\">2.36</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\nThere is slight overhead in translating the **dplyr** syntax to **data.table** but the slowdown really comes from converting the data frame to a **data.table** object as shown in the first row. If you do that every time, **data.table** is slower than **dplyr**. Try to convert your dataset only once and then work can continue to be on the **data.table**.\n\n## Arrow\n\nNext up is **Arrow**. This is a columnar database from [Apache](https://arrow.apache.org/docs/index.html). It uses a matching file format called **parquet**. This is a very efficient way to store data and is designed from the ground up to handle datasets larger than can fit in memory (but that is beyond the scope of this analysis). What's nice is that **the arrow R package already has a dplyr interface as it's native interface!** There is no separate package to translate **dplyr** verbs to a different **arrow** syntax.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndo_arrow <- function(df) {\n   if (\"ArrowObject\" %in% class(df)) {\n      df |>\n         group_by(city) |>\n         summarize(\n            high = max(temp),\n            low = min(temp),\n            avg = mean(temp)\n         ) |>\n         collect()\n   } else {\n      df |>\n         arrow_table() |>\n         group_by(city) |>\n         summarize(\n            high = max(temp),\n            low = min(temp),\n            avg = mean(temp)\n         ) |>\n         collect()\n   }\n}\n\narrow_df <- tidy_df |> arrow_table()\n\nbm_arrow <-  microbenchmark(do_arrow(arrow_df),\n                            do_arrow(tidy_df),\n                            times = 1)\nqbench(bm_arrow) |> gt()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"cjxnxeygdw\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#cjxnxeygdw table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#cjxnxeygdw thead, #cjxnxeygdw tbody, #cjxnxeygdw tfoot, #cjxnxeygdw tr, #cjxnxeygdw td, #cjxnxeygdw th {\n  border-style: none;\n}\n\n#cjxnxeygdw p {\n  margin: 0;\n  padding: 0;\n}\n\n#cjxnxeygdw .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#cjxnxeygdw .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#cjxnxeygdw .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#cjxnxeygdw .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#cjxnxeygdw .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#cjxnxeygdw .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#cjxnxeygdw .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#cjxnxeygdw .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#cjxnxeygdw .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#cjxnxeygdw .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#cjxnxeygdw .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#cjxnxeygdw .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#cjxnxeygdw .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#cjxnxeygdw .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#cjxnxeygdw .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#cjxnxeygdw .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#cjxnxeygdw .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#cjxnxeygdw .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#cjxnxeygdw .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#cjxnxeygdw .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#cjxnxeygdw .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#cjxnxeygdw .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#cjxnxeygdw .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#cjxnxeygdw .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#cjxnxeygdw .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#cjxnxeygdw .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#cjxnxeygdw .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#cjxnxeygdw .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#cjxnxeygdw .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#cjxnxeygdw .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#cjxnxeygdw .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#cjxnxeygdw .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#cjxnxeygdw .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#cjxnxeygdw .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#cjxnxeygdw .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#cjxnxeygdw .gt_left {\n  text-align: left;\n}\n\n#cjxnxeygdw .gt_center {\n  text-align: center;\n}\n\n#cjxnxeygdw .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#cjxnxeygdw .gt_font_normal {\n  font-weight: normal;\n}\n\n#cjxnxeygdw .gt_font_bold {\n  font-weight: bold;\n}\n\n#cjxnxeygdw .gt_font_italic {\n  font-style: italic;\n}\n\n#cjxnxeygdw .gt_super {\n  font-size: 65%;\n}\n\n#cjxnxeygdw .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#cjxnxeygdw .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#cjxnxeygdw .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#cjxnxeygdw .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#cjxnxeygdw .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#cjxnxeygdw .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#cjxnxeygdw .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"expr\">expr</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"seconds\">seconds</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"expr\" class=\"gt_row gt_center\">do_arrow(arrow_df)</td>\n<td headers=\"seconds\" class=\"gt_row gt_right\">1.12</td></tr>\n    <tr><td headers=\"expr\" class=\"gt_row gt_center\">do_arrow(tidy_df)</td>\n<td headers=\"seconds\" class=\"gt_row gt_right\">3.55</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\nWe see a nice speedup over the previous methods although only when we start out in the **arrow** format. The overhead of converting the data frame to an **arrow** table is significant. So if you want to use **arrow** you'll be right at home with the **dplyr** syntax but you should store and retrieve your data in native the **arrow** and **parquet** formats.\n\n## Polars\n\nMoving on to a database that's made a real splash in the Python community, **polars**. There is an R version, although it's not on CRAN so you have to install it from [here](). The **arrow** companion is [here](https://tidypolars.etiennebacher.com/).\n\nPolars uses the same columnar format as Arrow, but Polars has a secret weapon in that it does parallel processing by default. This is a big advantage when working with large data sets. Setup time for multi-threading is non-trivial so it really only shines on large data sets. Don't worry. It all happens in the background. You don't have to lift a finger.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndo_polars <- function(df = tidy_df, force_tidy = FALSE) {\n   if (\"tbl\" %in% class(df)) {\n      result <- df |>\n         as_polars_df() %>%\n         group_by(city) |>\n         summarize(\n            high = max(temp),\n            low = min(temp),\n            avg = mean(temp)\n         ) |>\n         arrange(city)\n      return(result)\n   }\n   if (force_tidy) {\n      result <- df |>\n         as_polars_df() %>%\n         group_by(city) |>\n         summarize(\n            high = max(temp),\n            low = min(temp),\n            avg = mean(temp)\n         ) |>\n         arrange(city)\n      return(result)\n   }\n   \n   result <- df$group_by(\"city\")$agg(\n      pl$col(\"temp\")$sum()$alias(\"avg\"),\n      pl$col(\"temp\")$min()$alias(\"low\"),\n      pl$col(\"temp\")$max()$alias(\"high\")\n   )\n   if (class(df) == \"RPolarsLazyFrame\") {\n      return(collect(result))\n   } else {\n      return(result)\n   }\n}\n\npolars_df <- tidy_df %>% as_polars_df()\n# try lazy frame, too!\npolars_lazy <- tidy_df %>% as_polars_lf()\n\nbm_polars <- microbenchmark(do_polars(tidy_df),\n               do_polars(polars_df),\n               do_polars(polars_lazy),\n               do_polars(polars_df,force_tidy = TRUE),\n               times = 1, unit=\"seconds\")\n\nqbench(bm_polars) |> gt()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"qnkvxbjphx\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#qnkvxbjphx table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#qnkvxbjphx thead, #qnkvxbjphx tbody, #qnkvxbjphx tfoot, #qnkvxbjphx tr, #qnkvxbjphx td, #qnkvxbjphx th {\n  border-style: none;\n}\n\n#qnkvxbjphx p {\n  margin: 0;\n  padding: 0;\n}\n\n#qnkvxbjphx .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#qnkvxbjphx .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#qnkvxbjphx .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#qnkvxbjphx .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#qnkvxbjphx .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#qnkvxbjphx .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#qnkvxbjphx .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#qnkvxbjphx .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#qnkvxbjphx .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#qnkvxbjphx .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#qnkvxbjphx .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#qnkvxbjphx .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#qnkvxbjphx .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#qnkvxbjphx .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#qnkvxbjphx .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#qnkvxbjphx .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#qnkvxbjphx .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#qnkvxbjphx .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#qnkvxbjphx .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#qnkvxbjphx .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#qnkvxbjphx .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#qnkvxbjphx .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#qnkvxbjphx .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#qnkvxbjphx .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#qnkvxbjphx .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#qnkvxbjphx .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#qnkvxbjphx .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#qnkvxbjphx .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#qnkvxbjphx .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#qnkvxbjphx .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#qnkvxbjphx .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#qnkvxbjphx .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#qnkvxbjphx .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#qnkvxbjphx .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#qnkvxbjphx .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#qnkvxbjphx .gt_left {\n  text-align: left;\n}\n\n#qnkvxbjphx .gt_center {\n  text-align: center;\n}\n\n#qnkvxbjphx .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#qnkvxbjphx .gt_font_normal {\n  font-weight: normal;\n}\n\n#qnkvxbjphx .gt_font_bold {\n  font-weight: bold;\n}\n\n#qnkvxbjphx .gt_font_italic {\n  font-style: italic;\n}\n\n#qnkvxbjphx .gt_super {\n  font-size: 65%;\n}\n\n#qnkvxbjphx .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#qnkvxbjphx .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#qnkvxbjphx .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#qnkvxbjphx .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#qnkvxbjphx .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#qnkvxbjphx .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#qnkvxbjphx .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"expr\">expr</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"seconds\">seconds</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"expr\" class=\"gt_row gt_center\">do_polars(tidy_df)</td>\n<td headers=\"seconds\" class=\"gt_row gt_right\">3.51</td></tr>\n    <tr><td headers=\"expr\" class=\"gt_row gt_center\">do_polars(polars_df)</td>\n<td headers=\"seconds\" class=\"gt_row gt_right\">0.71</td></tr>\n    <tr><td headers=\"expr\" class=\"gt_row gt_center\">do_polars(polars_lazy)</td>\n<td headers=\"seconds\" class=\"gt_row gt_right\">0.72</td></tr>\n    <tr><td headers=\"expr\" class=\"gt_row gt_center\">do_polars(polars_df, force_tidy = TRUE)</td>\n<td headers=\"seconds\" class=\"gt_row gt_right\">0.74</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\nPretty speedy! We've halved the time shown by **arrow**. Not only that, the performance of the **tidypolars** wrapper is great! We take only a tiny performance hit. Again, the overhead in converting an R data frame to polars is considerable. We are much better off if we start out with a **polars** data frame or stay in that format after converting once. If you want to use **polars** end-to-end, the file format that matches the in-memory structure of a **polars** data frame is the Apache **parquet** format also contained in the **arrow** package. There are no read/write functions in **tidypolars** so to read and write **parquet** files with **polars**, use the `pl_read_parquet()` function and `<data frame>$write_parquet` method from the **polars** package.\n\nNote the use inclusion of a 'lazy' data frame in the test. Delaying query execution until all operations have been planned speeds things up a wee bit.\n\n::: callout-tip\nPolars for R is pretty new so both the native package and `tidypolars` are works in progress. Coverage of **dplyr** verbs is not 100%. In particular, if you do a anything beyond basic functions in `mutate()` you will have to \"roll your own\" Polars function. The syntax of the native version in R is \"pythonic,\" so it prefers object methods over functions.\n\nAs an example, there are several `lubridate` functions in `tidypolars` but the `yearqtr` type is not supported. Suppose we want to convert a date column to a year and quarter. We can create our own function that returns valid Polars code that can be used in a `tidypolars::mutate()` call.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npl_to_yrqtr <- function(x){\n  q <- x$dt$quarter()$cast(pl$String)\n  y <- x$dt$year()$cast(pl$String)\n  pl$concat_str(y,q,separator = \"Q\")\n}\n\n\ndf = pl$DataFrame(\n  \"date\" = as.Date(c(\"2022-1-1\", \"2022-5-2\", \"2022-12-3\"))\n)\ndf %>% \n  mutate(yrqtr = pl_to_yrqtr(date)) %>%\n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  date       yrqtr \n  <date>     <chr> \n1 2022-01-01 2022Q1\n2 2022-05-02 2022Q2\n3 2022-12-03 2022Q4\n```\n\n\n:::\n:::\n\n\nThere is a great Polars cookbook by Damien Dotta for R users [here](https://ddotta.github.io/cookbook-rpolars/) which shows many side-by-side comparisons of **dplyr** and **polars** syntax. I urge you to refer to it for help with translating your code into native **polars** if you choose to go that route.\n:::\n\n## duckDB\n\nOur final contender is **duckdb** with **duckplyr**. This is a relational database that supports \"Structured Query Language\" (SQL). SQL is easy to read but very different from R. Also, you first establish a connection to the database and work with the connection, not the data frame. **duckplyr** to the rescue. The speed boost comes from a [columnar-vectorized query execution engine](https://duckdb.org/why_duckdb#fast).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndo_duckdb <- function(df = tidy_df, use_tidy = TRUE) {\n   # duckdb_register(con, \"duck_df\",overwrite = TRUE, orig_df)\n   if (use_tidy) {\n      if (\"duckplyr_df\" %in% class(df)) {\n         # df was converted outside of function\n         result <- df |>\n            group_by(city) |>\n            summarize(\n               high = max(temp),\n               low = min(temp),\n               avg = mean(temp)\n            )\n         return(result)\n      } else {\n         # convert df to duck right now\n         result <- as_duckplyr_df(df) |>\n            group_by(city) |>\n            summarize(\n               high = max(temp),\n               low = min(temp),\n               avg = mean(temp)\n            )\n         return(result)\n      }\n   } else {\n      con <- dbConnect(duckdb::duckdb())\n      # use global tidy_df so it doesn't matter what df was fed to function\n      duckdb_register(con, \"duck_df\", overwrite = TRUE, tidy_df)\n      # achieve the same result with dbGetQuery\n      result <- dbGetQuery(\n         con,\n         \"SELECT city, AVG(temp) as avg, MIN(temp) as low, MAX(temp) as high FROM duck_df GROUP BY city\"\n      )\n      result\n      dbDisconnect(con, shutdown = TRUE)\n      rm(con)\n   }\n   return(result)\n}\n\nduck_df <- as_duckplyr_df(tidy_df)\n\nbm_duckdb <- microbenchmark(do_duckdb(tidy_df,use_tidy = TRUE),\n                            do_duckdb(duck_df,use_tidy = TRUE),\n                            do_duckdb(duck_df,use_tidy = FALSE),\n                            times = 1, unit=\"seconds\")\nqbench(bm_duckdb) |> gt()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"agqrghcdrf\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#agqrghcdrf table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#agqrghcdrf thead, #agqrghcdrf tbody, #agqrghcdrf tfoot, #agqrghcdrf tr, #agqrghcdrf td, #agqrghcdrf th {\n  border-style: none;\n}\n\n#agqrghcdrf p {\n  margin: 0;\n  padding: 0;\n}\n\n#agqrghcdrf .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#agqrghcdrf .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#agqrghcdrf .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#agqrghcdrf .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#agqrghcdrf .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#agqrghcdrf .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#agqrghcdrf .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#agqrghcdrf .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#agqrghcdrf .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#agqrghcdrf .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#agqrghcdrf .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#agqrghcdrf .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#agqrghcdrf .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#agqrghcdrf .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#agqrghcdrf .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#agqrghcdrf .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#agqrghcdrf .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#agqrghcdrf .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#agqrghcdrf .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#agqrghcdrf .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#agqrghcdrf .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#agqrghcdrf .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#agqrghcdrf .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#agqrghcdrf .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#agqrghcdrf .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#agqrghcdrf .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#agqrghcdrf .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#agqrghcdrf .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#agqrghcdrf .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#agqrghcdrf .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#agqrghcdrf .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#agqrghcdrf .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#agqrghcdrf .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#agqrghcdrf .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#agqrghcdrf .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#agqrghcdrf .gt_left {\n  text-align: left;\n}\n\n#agqrghcdrf .gt_center {\n  text-align: center;\n}\n\n#agqrghcdrf .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#agqrghcdrf .gt_font_normal {\n  font-weight: normal;\n}\n\n#agqrghcdrf .gt_font_bold {\n  font-weight: bold;\n}\n\n#agqrghcdrf .gt_font_italic {\n  font-style: italic;\n}\n\n#agqrghcdrf .gt_super {\n  font-size: 65%;\n}\n\n#agqrghcdrf .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#agqrghcdrf .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#agqrghcdrf .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#agqrghcdrf .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#agqrghcdrf .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#agqrghcdrf .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#agqrghcdrf .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"expr\">expr</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"seconds\">seconds</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"expr\" class=\"gt_row gt_center\">do_duckdb(tidy_df, use_tidy = TRUE)</td>\n<td headers=\"seconds\" class=\"gt_row gt_right\">2.74</td></tr>\n    <tr><td headers=\"expr\" class=\"gt_row gt_center\">do_duckdb(duck_df, use_tidy = TRUE)</td>\n<td headers=\"seconds\" class=\"gt_row gt_right\">2.12</td></tr>\n    <tr><td headers=\"expr\" class=\"gt_row gt_center\">do_duckdb(duck_df, use_tidy = FALSE)</td>\n<td headers=\"seconds\" class=\"gt_row gt_right\">0.93</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\nSo this is interesting. Converting to a **duckdb** object adds essentially no overhead but the using the tidy vernacular is far slower than native. I suspect the internals of opening and closing the database connection are to blame. **duckdb** is competitive with **polars** but only in native mode. If speeding up your execution times is the priority, I cannot recommend the **duckplyr** wrapper. Brush up on your SQL chops, instead.\n\n## Conclusion\n\nBefore drawing any conclusions, let's throw out a couple caveats. The summary statistics we are calculating are very simple. If you are doing something more complex, the results may be different. I urge you do to your own tests. Further, the data set is all in memory. If you are working with data on disk, the results may be different. Coverage of the **Tidyverse** is not complete for all these wrappers. Some of your data wrangling pipelines may not work.\n\nAs a general statement, the process of converting a standard R data frame to the format used by any of these alt-database engines is significant. You should make the conversion once in your data manipulation pipeline, then stay in the more efficient format until it's time to present the results with something like **ggplot**.\n\nNow let's summarize alt-database engines the way you would typically see them benchmarked, using their native interfaces and data frame formats.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbm <- rbind(bm_dt, bm_arrow, bm_polars, bm_duckdb)\n\nnative_exprs <- c(\"do_dplyr(tidy_df)\",\"do_data.table(DT_df, force_tidy = FALSE)\",\"do_arrow(arrow_df)\",\n\"do_polars(polars_lazy)\",\"do_duckdb(duck_df, use_tidy = FALSE)\")\n\nbm |> qbench() |> \n   filter(expr %in% native_exprs) |>\n   mutate(method = str_extract(expr,\"do_.*\\\\(\") |> str_remove(\"do_\") |> str_remove(\"\\\\(\") |> str_to_title()) |>\n   ggplot(aes(x = fct_reorder(method,seconds), y = seconds)) + geom_col() + coord_flip() +\n   labs(title = \"Performance of Native\\nAlt-databases\",\n        subtitle = \"Time in seconds (lower is better)\",\n        x = \"Method\", y = \"Seconds\") +\n   theme_minimal() +\n   theme(text = element_text(size = 10))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/bm_comparison-1.png){width=672}\n:::\n:::\n\n\nIt looks like both **duckdb** and **polars** offer significant speed advantages over **dplyr** but, as mentioned at the beginning, there is more to the story for a **tidyverse** user.\n\nSince this post is for people who are interested in speeding up R database operations AND who prefer using **Tidyverse** syntax, let's summarize the performance of the four contenders using their Tidyverse wrappers around the native data frame formats. **duckdb** is an odd case in that you can't avoid the translation costs from R to **duckdb** format if you want to use the **duckplyr** wrapper. **Remember, this is not showing which database is fastest. It is showing which database is fastest when using Tidyverse syntax.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbm_tidy_exprs <- c(\n   'do_dplyr(tidy_df)',\n   'do_data.table(DT_df, force_tidy = TRUE)',\n   'do_arrow(arrow_df)',\n   'do_polars(polars_df, force_tidy = TRUE)',\n   'do_duckdb(duck_df, use_tidy = TRUE)'\n)\n\nbm |> qbench() |> \n   filter(expr %in% bm_tidy_exprs) |>\n   mutate(method = str_extract(expr,\"do_.*\\\\(\") |> str_remove(\"do_\") |> str_remove(\"\\\\(\") |> str_to_title()) |>\n   ggplot(aes(x = fct_reorder(method,seconds), y = seconds)) + geom_col() + coord_flip() +\n   labs(title = \"Performance of\\nTidyverse Wrappers\",\n        subtitle = \"Time in seconds (lower is better)\",\n        x = \"Database Wrapped with Dplyr Verbs\", y = \"Seconds\") +\n   theme_minimal() +\n   theme(text = element_text(size = 10))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/bm_comparison_tidy-1.png){width=672}\n:::\n:::\n\n\n**The clear winner is** polars**.** While both **polars** and **duckdb** are competitive in native mode, the tidyverse wrapper for **duckdb** is a performance killer. To get the most benefit from **polars** you should read and write your data files in **parquet** format and only convert **polars** objects with `as_tibble()` when you are ready to do some plotting or other non-database operations.\n\n## Should you always use an alt-database?\n\nAll of these databases are optimized for certain things but they all come with overhead. In the case of **polars** the parallel processing and lazy evaluation provide the speed advantage over **dplyr** but it does some behind-the-scenes setup to run and that adds time. On small datasets it's not worth it. At what point does the dataset size make using **polars** faster than **dplyr**? Let's find out.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrow_subsets <- 10^(4:8)\n\nsub_df <- function(df){\n      df |> group_by(city) |>\n         summarize(\n            high = max(temp),\n            low = min(temp),\n            avg = mean(temp)\n         ) |>\n         collect()\n}\n\ncompare_dplry_to_polars <- function(rows,times=1){\n   microbenchmark(sub_df(head(tidy_df,rows)),\n                  sub_df(head(polars_lazy,rows)),\n                  times=times,unit=\"seconds\") |> \n      qbench(round = Inf) |>\n      # as_tibble() |> \n      mutate(rows = rows,.before = \"seconds\") |> \n      mutate(method = str_remove(expr,\"sub_df\\\\(head\\\\(\") |> \n                str_remove(\", rows\\\\)\\\\)\"),.before = \"rows\") |>\n      select(method,rows,seconds) |> \n      pivot_wider(names_from = method,values_from = seconds) |> \n      mutate(ratio = polars_lazy / tidy_df)\n}\n\nget_size <- function(rows){\n   tibble(rows = rows, data_size = format(object.size(head(tidy_df,rows)),units=\"MB\"))\n}\n\nbm_size <- row_subsets |> map(compare_dplry_to_polars) |> bind_rows()\nbm_size |> ggplot(aes(x = rows, y = ratio)) + geom_line() + \n   labs(title = \"Polars vs Dplyr\",\n        subtitle = \"Ratio of Polars to Dplyr Execution Time\",\n        x = \"Rows (Log Scale)\", y = \"Ratio\") +\n   geom_hline(yintercept = 1, linetype = \"dashed\") +\n   scale_x_log10(n.breaks = length(row_subsets)) +\n   theme_minimal() +\n   theme(text = element_text(size = 10))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/polars_vs_dplyr_small-1.png){width=672}\n:::\n:::\n\n\nLet's zoom in on the region where the crossover occurs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrow_subsets_2 <- seq(from=5,to=25,by=5)*1e5\n\nbm_size_2 <- row_subsets_2 |> map(compare_dplry_to_polars,times=10) |> bind_rows()\n\nbm_size_2 |> ggplot(aes(x = rows/1e6, y = ratio)) + geom_line() + \n   labs(title = \"Polars vs Dplyr\",\n        subtitle = \"Ratio of Polars to Dplyr Execution Time\",\n        x = \"Millions of Rows\", y = \"Ratio\") +\n   geom_hline(yintercept = 1, linetype = \"dashed\") +\n   theme_minimal() +\n   theme(text = element_text(size = 10))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/polars_vs_dplyr_small_plot_2-1.png){width=672}\n:::\n:::\n\n\nIt looks like the crossover point, where **polars** becomes a better choice than **dplyr** **with this dataset**, is between 1 and 1.5 million rows. This is a rough estimate and will depend on a lot of factors. The dataset we are using has only two columns. The geometry of your data will certainly be different so it may also be helpful to look at the size of the dataset. Here it seems that we should prefer **polars** if our dataset is larger than around 23MB.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nobj_sizes_2 <- row_subsets_2 |> map(get_size) |> bind_rows()\nbm_size_3 <- bm_size_2 |> left_join(obj_sizes_2,by=\"rows\")\nbm_size_3 |> gt() |> \n   fmt_number(columns = 1,use_seps = TRUE,decimals = 0) |>\n   fmt_number(columns = 2:4,use_seps = TRUE,decimals = 2)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"ouvgjzexhm\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#ouvgjzexhm table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#ouvgjzexhm thead, #ouvgjzexhm tbody, #ouvgjzexhm tfoot, #ouvgjzexhm tr, #ouvgjzexhm td, #ouvgjzexhm th {\n  border-style: none;\n}\n\n#ouvgjzexhm p {\n  margin: 0;\n  padding: 0;\n}\n\n#ouvgjzexhm .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#ouvgjzexhm .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#ouvgjzexhm .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#ouvgjzexhm .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#ouvgjzexhm .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ouvgjzexhm .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ouvgjzexhm .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ouvgjzexhm .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#ouvgjzexhm .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#ouvgjzexhm .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#ouvgjzexhm .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#ouvgjzexhm .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#ouvgjzexhm .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#ouvgjzexhm .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#ouvgjzexhm .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#ouvgjzexhm .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#ouvgjzexhm .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#ouvgjzexhm .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#ouvgjzexhm .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ouvgjzexhm .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#ouvgjzexhm .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#ouvgjzexhm .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#ouvgjzexhm .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ouvgjzexhm .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#ouvgjzexhm .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#ouvgjzexhm .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ouvgjzexhm .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ouvgjzexhm .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#ouvgjzexhm .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ouvgjzexhm .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#ouvgjzexhm .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ouvgjzexhm .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ouvgjzexhm .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ouvgjzexhm .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ouvgjzexhm .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ouvgjzexhm .gt_left {\n  text-align: left;\n}\n\n#ouvgjzexhm .gt_center {\n  text-align: center;\n}\n\n#ouvgjzexhm .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#ouvgjzexhm .gt_font_normal {\n  font-weight: normal;\n}\n\n#ouvgjzexhm .gt_font_bold {\n  font-weight: bold;\n}\n\n#ouvgjzexhm .gt_font_italic {\n  font-style: italic;\n}\n\n#ouvgjzexhm .gt_super {\n  font-size: 65%;\n}\n\n#ouvgjzexhm .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#ouvgjzexhm .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#ouvgjzexhm .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#ouvgjzexhm .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#ouvgjzexhm .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#ouvgjzexhm .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#ouvgjzexhm .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"rows\">rows</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"tidy_df\">tidy_df</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"polars_lazy\">polars_lazy</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"ratio\">ratio</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"data_size\">data_size</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"rows\" class=\"gt_row gt_right\">500,000</td>\n<td headers=\"tidy_df\" class=\"gt_row gt_right\">0.02</td>\n<td headers=\"polars_lazy\" class=\"gt_row gt_right\">0.04</td>\n<td headers=\"ratio\" class=\"gt_row gt_right\">1.91</td>\n<td headers=\"data_size\" class=\"gt_row gt_left\">7.7 Mb</td></tr>\n    <tr><td headers=\"rows\" class=\"gt_row gt_right\">1,000,000</td>\n<td headers=\"tidy_df\" class=\"gt_row gt_right\">0.04</td>\n<td headers=\"polars_lazy\" class=\"gt_row gt_right\">0.04</td>\n<td headers=\"ratio\" class=\"gt_row gt_right\">1.18</td>\n<td headers=\"data_size\" class=\"gt_row gt_left\">15.3 Mb</td></tr>\n    <tr><td headers=\"rows\" class=\"gt_row gt_right\">1,500,000</td>\n<td headers=\"tidy_df\" class=\"gt_row gt_right\">0.05</td>\n<td headers=\"polars_lazy\" class=\"gt_row gt_right\">0.05</td>\n<td headers=\"ratio\" class=\"gt_row gt_right\">0.98</td>\n<td headers=\"data_size\" class=\"gt_row gt_left\">22.9 Mb</td></tr>\n    <tr><td headers=\"rows\" class=\"gt_row gt_right\">2,000,000</td>\n<td headers=\"tidy_df\" class=\"gt_row gt_right\">0.07</td>\n<td headers=\"polars_lazy\" class=\"gt_row gt_right\">0.06</td>\n<td headers=\"ratio\" class=\"gt_row gt_right\">0.83</td>\n<td headers=\"data_size\" class=\"gt_row gt_left\">30.5 Mb</td></tr>\n    <tr><td headers=\"rows\" class=\"gt_row gt_right\">2,500,000</td>\n<td headers=\"tidy_df\" class=\"gt_row gt_right\">0.08</td>\n<td headers=\"polars_lazy\" class=\"gt_row gt_right\">0.06</td>\n<td headers=\"ratio\" class=\"gt_row gt_right\">0.78</td>\n<td headers=\"data_size\" class=\"gt_row gt_left\">38.2 Mb</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\nThere are infinite combinations of hardware, data structures and processing pipelines possible and you may find a different result in your work. **polars** for R is not on CRAN yet but it's worth seeking out. I will be incorporating it in my work from now on. I am grateful for any comments, criticisms or observations you may have. Thanks for reading!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}