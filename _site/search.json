[
  {
    "objectID": "posts/2023-06-09-kakhovka-dam/index.html",
    "href": "posts/2023-06-09-kakhovka-dam/index.html",
    "title": "Kakhovka Dam Disaster",
    "section": "",
    "text": "The war in Ukraine has spawned yet another disaster, the destruction of the dam across the Dnipro river, upstream from Kherson City. This is an ecologial and humanitarian disaster as vast acres of settlements, farmlands and wetlands have been destroyed.\nThis marks the third time a dam in this region has been destroyed. First in 1941, the Soviets blew up a dam to impede the advancing Germans in southern city of Zaporizhzhia, upstream of the present dam. Tens of thousands of people were killed among Ukrainians and Red Army soldiers (the Germans were not yet in the area). The Germans repaired it. Then, in 1943, the Germans blew it up again to thwart the advancing Soviets.\n\n\n\nSource: Bundesarchiv\n\n\nIronically, just as the destruction of the Kakhovka dam is an ecological tragedy, so too, was its construction. Many settlements and wetlands were submerged as the Dnipro river backed up to serve Stalin’s drive to collectivize and modernize agriculture."
  },
  {
    "objectID": "posts/2023-06-09-kakhovka-dam/index.html#some-history",
    "href": "posts/2023-06-09-kakhovka-dam/index.html#some-history",
    "title": "Kakhovka Dam Disaster",
    "section": "",
    "text": "The war in Ukraine has spawned yet another disaster, the destruction of the dam across the Dnipro river, upstream from Kherson City. This is an ecologial and humanitarian disaster as vast acres of settlements, farmlands and wetlands have been destroyed.\nThis marks the third time a dam in this region has been destroyed. First in 1941, the Soviets blew up a dam to impede the advancing Germans in southern city of Zaporizhzhia, upstream of the present dam. Tens of thousands of people were killed among Ukrainians and Red Army soldiers (the Germans were not yet in the area). The Germans repaired it. Then, in 1943, the Germans blew it up again to thwart the advancing Soviets.\n\n\n\nSource: Bundesarchiv\n\n\nIronically, just as the destruction of the Kakhovka dam is an ecological tragedy, so too, was its construction. Many settlements and wetlands were submerged as the Dnipro river backed up to serve Stalin’s drive to collectivize and modernize agriculture."
  },
  {
    "objectID": "posts/2023-06-09-kakhovka-dam/index.html#visualizing-the-disaster",
    "href": "posts/2023-06-09-kakhovka-dam/index.html#visualizing-the-disaster",
    "title": "Kakhovka Dam Disaster",
    "section": "Visualizing the Disaster",
    "text": "Visualizing the Disaster\nLast week, as water poured through the gap where the Kakhovka dam used to be, water levels surged downstream. This was a rolling disaster, with the river delta at the Black Sea seeing the flow last. We can make a rough attempt to visualize the effect of the rising water with an animated inundation map. This is a pretty sophisticated undertaking. Fortunately, there are tools in the form of R packages that have been developed in the last several years that make it easy for anyone to make inundation maps. There are many pieces of the project below where I can not believe how few lines of code are needed.\nLet’s see how easy it is.\n\nLoad the Region of Interest.\nAs usual, we load the required packages. Then I just looked at Google Maps to find the coordinates of a region spanning from the Kakhovka dam in the east to the Dnipro delta in the west. Since they were displayed in degrees, minutes and seconds, I wrote a quickie function to convert them to decimal. Note that longitude west of zero and latitude south of zero are expressed as negative, neither of which is true here. Longitudes in the United States, for instance, have a negative sign.\n\nlibrary(tidyverse)\n# GIS packages\nlibrary(elevatr)\nlibrary(rayshader)\nlibrary(sf)\nlibrary(raster)\nlibrary(leaflet)\nlibrary(osmdata)\nlibrary(basemaps)\n# Make GIFs\nlibrary(magick)\n\ndms_to_dec &lt;- function(deg=0, min=0, sec=0) {\n  return(deg + min / 60 + sec / 3600)\n}\nkh_loc &lt;- data.frame(lat = c(dms_to_dec(46,51,00),dms_to_dec(46,18,00)),\n                             lon= c(dms_to_dec(32,09,00),dms_to_dec(33,25,00)) )\n\nHere is the first “wow, that was easy” moment. We can confirm our coordinates by quickly pulling in a map with multiple layers, one for geographic names, and one for the satellite image. This is done with the leaflet package.\n\nleaflet() |&gt; \n  fitBounds(kh_loc$lon[1],kh_loc$lat[1],kh_loc$lon[2],kh_loc$lat[2]) |&gt; \n  addProviderTiles(providers$Esri.WorldImagery) |&gt; \n  addProviderTiles(providers$CartoDB.PositronOnlyLabels,\n                   options = providerTileOptions(opacity = 1))\n\n\n\n\n\nThis is an interactive map. We can pan and zoom to our heart’s content. There are some interesting observations we can make. The dam is at the northeast corner of the image. We can see the swampy lowlands below the dam. They lie mainly to the south of the primary course of the river. Notice the crop circles to the east and south of the reservoir. There are many visible if we pan a bit to the east. This tells us that the crops grown there are irrigated by water pumped to center-pivot sprinkler systems. Presumably the water comes from the reservoir which is now disappearing.\n\nsource: iStock\nJust to the east of the dam we also see the Crimean canal stretching south, which is a major source of fresh water for the Crimean peninsula. This, too, will cease to function.\n\n\nModeling the Effects of the Disaster\nWe are interested in modeling which parts of the river basin got submerged after the destruction of the dam. Obviously we need to know the elevation of the land. Using the elevatr package it only takes one line of code to retrieve a topographic map from the OpenTopography data set. This gets us a raster object that contains a matrix with elevations at each point. It also contains metadata with the coordinate system.\n\nkherson_dnipro &lt;- kh_loc |&gt; \n  st_as_sf(coords = c(\"lon\",\"lat\"),crs = 4326)\n\n# get the topo matrix\nkherson_elev &lt;- get_elev_raster(kherson_dnipro, \n                                src = \"gl1\", \n                                clip = \"bbox\",\n                                verbose = FALSE,\n                                serial=TRUE) \n\n\nDownloading: 8.2 kB     \nDownloading: 8.2 kB     \nDownloading: 25 kB     \nDownloading: 25 kB     \nDownloading: 41 kB     \nDownloading: 41 kB     \nDownloading: 57 kB     \nDownloading: 57 kB     \nDownloading: 65 kB     \nDownloading: 65 kB     \nDownloading: 74 kB     \nDownloading: 74 kB     \nDownloading: 98 kB     \nDownloading: 98 kB     \nDownloading: 150 kB     \nDownloading: 150 kB     \nDownloading: 210 kB     \nDownloading: 210 kB     \nDownloading: 210 kB     \nDownloading: 210 kB     \nDownloading: 240 kB     \nDownloading: 240 kB     \nDownloading: 260 kB     \nDownloading: 260 kB     \nDownloading: 290 kB     \nDownloading: 290 kB     \nDownloading: 340 kB     \nDownloading: 340 kB     \nDownloading: 360 kB     \nDownloading: 360 kB     \nDownloading: 440 kB     \nDownloading: 440 kB     \nDownloading: 450 kB     \nDownloading: 450 kB     \nDownloading: 490 kB     \nDownloading: 490 kB     \nDownloading: 510 kB     \nDownloading: 510 kB     \nDownloading: 550 kB     \nDownloading: 550 kB     \nDownloading: 600 kB     \nDownloading: 600 kB     \nDownloading: 610 kB     \nDownloading: 610 kB     \nDownloading: 640 kB     \nDownloading: 640 kB     \nDownloading: 650 kB     \nDownloading: 650 kB     \nDownloading: 680 kB     \nDownloading: 680 kB     \nDownloading: 700 kB     \nDownloading: 700 kB     \nDownloading: 720 kB     \nDownloading: 720 kB     \nDownloading: 720 kB     \nDownloading: 720 kB     \nDownloading: 760 kB     \nDownloading: 760 kB     \nDownloading: 810 kB     \nDownloading: 810 kB     \nDownloading: 810 kB     \nDownloading: 810 kB     \nDownloading: 910 kB     \nDownloading: 910 kB     \nDownloading: 930 kB     \nDownloading: 930 kB     \nDownloading: 970 kB     \nDownloading: 970 kB     \nDownloading: 980 kB     \nDownloading: 980 kB     \nDownloading: 1 MB     \nDownloading: 1 MB     \nDownloading: 1 MB     \nDownloading: 1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.2 MB     \nDownloading: 1.2 MB     \nDownloading: 1.2 MB     \nDownloading: 1.2 MB     \nDownloading: 1.2 MB     \nDownloading: 1.2 MB     \nDownloading: 1.2 MB     \nDownloading: 1.2 MB     \nDownloading: 1.2 MB     \nDownloading: 1.2 MB     \nDownloading: 1.2 MB     \nDownloading: 1.2 MB     \nDownloading: 1.3 MB     \nDownloading: 1.3 MB     \nDownloading: 1.3 MB     \nDownloading: 1.3 MB     \nDownloading: 1.3 MB     \nDownloading: 1.3 MB     \nDownloading: 1.3 MB     \nDownloading: 1.3 MB     \nDownloading: 1.4 MB     \nDownloading: 1.4 MB     \nDownloading: 1.4 MB     \nDownloading: 1.4 MB     \nDownloading: 1.5 MB     \nDownloading: 1.5 MB     \nDownloading: 1.5 MB     \nDownloading: 1.5 MB     \nDownloading: 1.6 MB     \nDownloading: 1.6 MB     \nDownloading: 1.6 MB     \nDownloading: 1.6 MB     \nDownloading: 1.7 MB     \nDownloading: 1.7 MB     \nDownloading: 1.7 MB     \nDownloading: 1.7 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.9 MB     \nDownloading: 1.9 MB     \nDownloading: 1.9 MB     \nDownloading: 1.9 MB     \nDownloading: 1.9 MB     \nDownloading: 1.9 MB     \nDownloading: 1.9 MB     \nDownloading: 1.9 MB     \nDownloading: 1.9 MB     \nDownloading: 1.9 MB     \nDownloading: 2 MB     \nDownloading: 2 MB     \nDownloading: 2 MB     \nDownloading: 2 MB     \nDownloading: 2 MB     \nDownloading: 2 MB     \nDownloading: 2 MB     \nDownloading: 2 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.2 MB     \nDownloading: 2.2 MB     \nDownloading: 2.2 MB     \nDownloading: 2.2 MB     \nDownloading: 2.2 MB     \nDownloading: 2.2 MB     \nDownloading: 2.2 MB     \nDownloading: 2.2 MB     \nDownloading: 2.2 MB     \nDownloading: 2.2 MB     \nDownloading: 2.2 MB     \nDownloading: 2.2 MB     \nDownloading: 2.3 MB     \nDownloading: 2.3 MB     \nDownloading: 2.3 MB     \nDownloading: 2.3 MB     \nDownloading: 2.3 MB     \nDownloading: 2.3 MB     \nDownloading: 2.3 MB     \nDownloading: 2.3 MB     \nDownloading: 2.3 MB     \nDownloading: 2.3 MB     \nDownloading: 2.3 MB     \nDownloading: 2.3 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.5 MB     \nDownloading: 2.5 MB     \nDownloading: 2.5 MB     \nDownloading: 2.5 MB     \nDownloading: 2.6 MB     \nDownloading: 2.6 MB     \nDownloading: 2.6 MB     \nDownloading: 2.6 MB     \nDownloading: 2.6 MB     \nDownloading: 2.6 MB     \nDownloading: 2.6 MB     \nDownloading: 2.6 MB     \nDownloading: 2.6 MB     \nDownloading: 2.6 MB     \nDownloading: 2.7 MB     \nDownloading: 2.7 MB     \nDownloading: 2.7 MB     \nDownloading: 2.7 MB     \nDownloading: 2.7 MB     \nDownloading: 2.7 MB     \nDownloading: 2.7 MB     \nDownloading: 2.7 MB     \nDownloading: 2.8 MB     \nDownloading: 2.8 MB     \nDownloading: 2.8 MB     \nDownloading: 2.8 MB     \nDownloading: 2.8 MB     \nDownloading: 2.8 MB     \nDownloading: 2.8 MB     \nDownloading: 2.8 MB     \nDownloading: 2.8 MB     \nDownloading: 2.8 MB     \nDownloading: 2.8 MB     \nDownloading: 2.8 MB     \nDownloading: 2.9 MB     \nDownloading: 2.9 MB     \nDownloading: 2.9 MB     \nDownloading: 2.9 MB     \nDownloading: 3 MB     \nDownloading: 3 MB     \nDownloading: 3.1 MB     \nDownloading: 3.1 MB     \nDownloading: 3.2 MB     \nDownloading: 3.2 MB     \nDownloading: 3.2 MB     \nDownloading: 3.2 MB     \nDownloading: 3.3 MB     \nDownloading: 3.3 MB     \nDownloading: 3.3 MB     \nDownloading: 3.3 MB     \nDownloading: 3.3 MB     \nDownloading: 3.3 MB     \nDownloading: 3.3 MB     \nDownloading: 3.3 MB     \n\nkherson_elev\n\nclass      : RasterLayer \ndimensions : 1980, 4560, 9028800  (nrow, ncol, ncell)\nresolution : 0.0002777778, 0.0002777778  (x, y)\nextent     : 32.14986, 33.41653, 46.30014, 46.85014  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs \nsource     : memory\nnames      : file67c139b4bf7 \nvalues     : -51, 107  (min, max)\n\n\nA quick and dirty plot of the matrix shows the flood situation. Bright green is high ground. The blue isn’t necessarily water, just water and land very nearly at sea level. The color scale is in meters above sea level. South of the river are mostly very low-lying areas. Notably, these areas are Russian controlled today. The north side is in Ukrainian hands.\n\npal &lt;- colorRampPalette(c(\"darkblue\",\"limegreen\"))\nplot(kherson_elev, col = pal(10))\n\n\n\n\nNow let’s create a more realistic view of the ground and show the rising water. To do this we’ll use the rayshader package. When Tyler Morgan-Wall released this package a few years ago, he opened up huge visualization vistas to the R community. We will just be touching the surface of its capabilities here. We’ll use two key features, the ability to shade the surface for a 3D effect and to detect and color bodies of water. Let’s exaggerate the z-axis a bit since this is generally very flat ground and we want to see subtle terrain changes. Like the ggplot2 package, we can start with a base plot and add layers.\n\nkh_elmat &lt;- raster_to_matrix(kherson_elev)\nbase_map &lt;- kh_elmat |&gt; \n  sphere_shade(texture = \"imhof1\",zscale = .8)\n\nbase_map |&gt; \n  add_water(detect_water(kh_elmat),color=\"desert\") |&gt; \n  plot_map()\n\n\n\n\nWe can clearly see the reservoir in the east, the delta in the west, the (exaggerated) canyons carved by the Dnipro tributaries and the narrow river connecting them."
  },
  {
    "objectID": "posts/2023-06-09-kakhovka-dam/index.html#the-human-dimension",
    "href": "posts/2023-06-09-kakhovka-dam/index.html#the-human-dimension",
    "title": "Kakhovka Dam Disaster",
    "section": "The Human Dimension",
    "text": "The Human Dimension\nWhat we don’t see are where the people are and this tragedy is very much a human one. We can get a sense of human presence by creating a road overlay using OpenStreetMap data. Again, the code needed to do this is trivially simple. Note the returned object has several layers but we are only interested in the osm_points.\n\nkherson_roads &lt;- osmdata::opq(st_bbox(kherson_dnipro)) %&gt;% \n   osmdata::add_osm_feature(\"highway\") %&gt;% \n   osmdata::osmdata_sf() \n \n# Take just the road layer and transform coordinates to our existing projection\nkherson_lines &lt;- sf::st_transform(kherson_roads$osm_lines,\n                                  crs = raster::crs(kherson_dnipro))\n\n# a rayshader object we pre-generate now for speed later\nroads &lt;-  generate_line_overlay(\n  kherson_lines,\n  heightmap = kh_elmat,\n  extent = extent(extent(kherson_dnipro)),\n  linewidth = 2\n)\n\nkherson_roads\n\nOnce again we do a quick and dirty plot to visualize the new layer. This is also super easy with the geom_sf geom in ggplot2.\n\n# View streets as a ggplot2 render \nggplot(kherson_lines, aes(color = osm_id)) + \n  geom_sf() +\n  theme(legend.position = \"none\") +\n  labs(title = \"Kherson Roads from Open Street Map\")"
  },
  {
    "objectID": "posts/2023-06-09-kakhovka-dam/index.html#add-more-realism",
    "href": "posts/2023-06-09-kakhovka-dam/index.html#add-more-realism",
    "title": "Kakhovka Dam Disaster",
    "section": "Add More Realism",
    "text": "Add More Realism\nLet’s overlay a satellite image to lend more realism to the image. In particular this lets us see the individual farms. Once again, the task is trivially easy using the basemaps package and the freely available ESRI “World Imagery” maps. This is the same image we saw at the beginning of this project but now saved as a “PNG” file. Rayshader will automatically scale the image to match the other layers in the map.\n\n# get image overlay\nsatview &lt;- basemap_png(\n  ext = kherson_dnipro,\n  map_service = \"esri\",\n  map_type = \"world_imagery\",\n  map_res = NULL,\n  verbose = TRUE,\n  browse = FALSE\n)\n\nLoading basemap 'world_imagery' from map service 'esri'...\n\n\nWhen we put it all together, what do we get?\n\nbase_map &lt;- base_map |&gt;\n  add_overlay(satview)\n\nbase_map |&gt;\n  add_water(detect_water(kh_elmat), color = \"desert\") |&gt;\n  add_overlay(roads)|&gt;\n  plot_map()\n\n\n\n\nWe can see the city of Kherson on the north side, the settlements on the south side, mostly out of the swampy areas along the river and, on the upper east side, the town of Nova Kakhovka where the dam and hydroelectric station were.\nUsing this as a base, let’s create a function that shows the impact of rising water levels. Rayshader will color totally flat areas as water so we mimic rising water by setting the elevations of any point below the rising water level to zero. We can iterate by setting the water level higher and higher to put more of the land “under water.”\nWe have several layers in this map. The shading, the satellite view, the water level and the streets. Order matters. The shading gets obscured by the satellite image. The rising water covers the satellite image. The streets are drawn last and remain visible so we can see just where human-occupied areas are being flooded. All these are aesthetic choices.\n\n\n\n\n\n\nNote:\n\n\n\nAt this point we should be clear about what this is and isn’t. The method we use here more properly would model rising sea levels. We don’t know exactly how the water affected each area at what time. We don’t know what the peak inundation level was for each area. Further, once the reservoir empties out, the water will recede. Let’s call this a “dramatization.” This does give a dramatic view of the scope of the destruction.\n\n\nThe function below will render a view of our map with a water level rise of zero though eight meters. Again, this doesn’t assume the water rose eight meters, only that it reached eight meters above sea level. That means land at an altitude of seven meters will be one meter underwater for an eight meter water rise. We save each a single image for each meter of water rise and speed things up by changing only the parts of the map which change with the water level.\n\nplot_rising_water &lt;- function(water_level = 0) {\n\n  # adjust elevations to simulate water\n  flood_elmat &lt;- ifelse(kh_elmat &lt; water_level, 0, kh_elmat)\n  \n  base_map |&gt;\n    add_water(detect_water(flood_elmat), color = \"desert\") |&gt;\n    # add roads on top of water\n    add_overlay(roads) |&gt;\n    save_png(\n      filename = paste0(\"img/frames/flood_\", \n                        formatC(water_level, width = 3, flag = \"0\"), \".png\"),\n      title_text = paste0(\n        \"Flood Inundation of the Dnipro\\nAfter Kakhovka Dam Destruction\\nWater Level:\",\n        formatC(water_level, width = 3, flag = \" \"),\n        \" Meters\"\n      ),\n      title_size = 60,\n      title_bar_color = \"white\"\n    )\n  \n  \n}\n# generate frames\n0:8 |&gt; walk(plot_rising_water)\n\nNow that we have saved nine still frames we can animate them into a short GIF file with almost no work at all. There are many ways to save a GIF animation with R. Here we use the magick package because we can create a smooth morph between frames which simulates rising water well.\n\n\n\n\n\n\nNote:\n\n\n\nWe use magick::image_resize() to downscale the individual frames to get a GIF of manageable size. Careful readers might wonder why we didn’t earlier downscale the elevation matrix instead. That would have sped up all the operations above. Unfortunately, that would make the flooded regions look very blocky as we would lose too much terrain data.\n\n\n\n# make GIF\ntarget_dir &lt;- \"img/frames\"\nfnames &lt;- paste0(\"img\\\\frames\\\\\", dir(\"img/frames\"))\nimage_read(fnames[1:9]) |&gt; \n  image_resize(\"1000x\") |&gt; \n  image_morph() |&gt; \n  image_animate() |&gt; \n  image_write(path = \"img/flood.gif\",format = \"gif\")\n\n\nWhile we don’t know what the maximum water height was or if all of the specific areas shown above got inundated but we do know many did and this clearly shows the vulnerable areas and where people have been potentially displaced."
  },
  {
    "objectID": "posts/2023-06-09-kakhovka-dam/index.html#now-you-try",
    "href": "posts/2023-06-09-kakhovka-dam/index.html#now-you-try",
    "title": "Kakhovka Dam Disaster",
    "section": "Now You Try",
    "text": "Now You Try\nHere we modeled the disaster in Ukraine but you might use these techniques to visualize the risk of flooding where you are considering buying a house, for example. You might also check out the USGS real-time stream gauge data to see what happens when the creek rises. All you need are four corners on a map to get started."
  },
  {
    "objectID": "posts/2023-06-09-kakhovka-dam/index.html#my-speculation",
    "href": "posts/2023-06-09-kakhovka-dam/index.html#my-speculation",
    "title": "Kakhovka Dam Disaster",
    "section": "My Speculation",
    "text": "My Speculation\nIt’s irrelevant to our project today but as of this writing, we don’t know for sure who blew up the dam. I certainly don’t know but I will make a couple observations. The dam is under Russian control and it looks like the explosion came from inside the structure. The Ukrainians control the Zaporizhzhia dam and there has been no talk of blowing that up. As we saw in WWII, both sides blew up dams to impede enemy advancement. There is one side that is advancing today and it’s the Ukrainians. The Russians would like to slow them down. Finally, while this potentially has one benefit for the Ukrainians by cutting the fresh water canal to Crimea, the Ukrainians could have destroyed just the canal and prevented the Russians from rebuilding it without blowing the dam. We shall see in the fullness of time."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Outsider Data Science",
    "section": "",
    "text": "Putting what’s in there, out there. With R!\n\n\n\n\n\n\nNote\n\n\n\nThis blog is for showing my experiments in R coding. If you are interested in my musings on investments, my LinkedIn posts are the place to find them. You can also visit artsteinmetz.com for more info.\n\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n\n\n\n\n  \n\n\n\n\nKakhovka Dam Disaster\n\n\n\n\n\nAnimate Flood Inundation Along the Dnipro River\n\n\n\n\n\n\nJun 9, 2023\n\n\nArt Steinmetz\n\n\n\n\n\n\n  \n\n\n\n\nAnimating a Heatmap with Rayshader\n\n\n\n\n\n\n\n\n\n\n\n\nMay 3, 2023\n\n\nArt Steinmetz\n\n\n\n\n\n\n  \n\n\n\n\nSentiment Analysis Using Google Translate (Pt. 4 - A Painful Sight)\n\n\n\n\n\n\n\ntwitter\n\n\ntidytext\n\n\ntext mining\n\n\n\n\n\n\n\n\n\n\n\nApr 30, 2023\n\n\nArt Steinmetz\n\n\n\n\n\n\n  \n\n\n\n\nSentiment Analysis Using Google Translate (Pt. 3 - Machine Learning)\n\n\n\n\n\n\n\ntidytext\n\n\ntwitter\n\n\nmachine learning\n\n\nxgboost\n\n\n\n\n\n\n\n\n\n\n\nApr 22, 2023\n\n\nArt Steinmetz\n\n\n\n\n\n\n  \n\n\n\n\nSentiment Analysis Using Google Translate (Pt. 2 - Word Valence)\n\n\n\n\n\n\n\ntidytext\n\n\ntwitter\n\n\n\n\n\n\n\n\n\n\n\nApr 16, 2023\n\n\nArt Steinmetz\n\n\n\n\n\n\n  \n\n\n\n\nSentiment Analysis Using Google Translate (Pt. 1 - Translation)\n\n\n\n\n\n\n\ntidyverse\n\n\ngoogle translate\n\n\ntwitter\n\n\n\n\n\n\n\n\n\n\n\nApr 15, 2023\n\n\nArt Steinmetz\n\n\n\n\n\n\n  \n\n\n\n\nSwitching to Quarto from Blogdown\n\n\n\n\n\n\n\nquarto\n\n\nblogging\n\n\n\n\n\n\n\n\n\n\n\nJan 24, 2022\n\n\nArt Steinmetz\n\n\n\n\n\n\n  \n\n\n\n\nCovid Cases vs. Deaths\n\n\n\n\n\n\n\nggplot2\n\n\ntidymodels\n\n\ntidyverse\n\n\nCOVID\n\n\n\n\nEstimate the average lag between a positive COVID-19 case and a death.\n\n\n\n\n\n\nDec 6, 2020\n\n\nArt Steinmetz\n\n\n\n\n\n\n  \n\n\n\n\nWhat Do The Ramones Want?\n\n\n\n\n\n\n\nggplot2\n\n\ntidytext\n\n\nmusic\n\n\n\n\n\n\n\n\n\n\n\nJan 15, 2020\n\n\nArt Steinmetz\n\n\n\n\n\n\n  \n\n\n\n\nState Taxes: It’s not just about Income\n\n\n\n\n\n\n\ntax\n\n\nplotly\n\n\n\n\n\n\n\n\n\n\n\nDec 8, 2019\n\n\nArt Steinmetz\n\n\n\n\n\n\n  \n\n\n\n\nGender Diversity in R and Python Package Contributors\n\n\n\n\n\n\n\ngithub\n\n\ngender\n\n\n\n\n\n\n\n\n\n\n\nJul 16, 2019\n\n\nArt Steinmetz\n\n\n\n\n\n\n  \n\n\n\n\nWhy I migrated from Excel to R\n\n\n\n\n\n\n\nR\n\n\nExcel\n\n\n\n\n\n\n\n\n\n\n\nJun 12, 2019\n\n\nArt Steinmetz\n\n\n\n\n\n\n  \n\n\n\n\nSolving the Letterboxed Puzzle in the New York Times\n\n\n\n\n\n\n\npuzzle\n\n\nrecursion\n\n\n\n\n\n\n\n\n\n\n\nApr 16, 2019\n\n\nArthur Steinmetz\n\n\n\n\n\n\n  \n\n\n\n\nWhere Are The Libertarians?\n\n\n\n\n\n\n\npolitics\n\n\nggplot2\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2019\n\n\nArt Steinmetz\n\n\n\n\n\n\n  \n\n\n\n\nRick and Morty Palettes\n\n\n\n\n\n\n\nclustering\n\n\nrick and morty\n\n\npalettes\n\n\n\n\n\n\n\n\n\n\n\nFeb 4, 2019\n\n\nArt Steinmetz\n\n\n\n\n\n\n  \n\n\n\n\nIs Free Pre-K in NYC Favoring the Rich?\n\n\n\n\n\n\n\nweb scraping\n\n\neducation\n\n\nmaps\n\n\n\n\n\n\n\n\n\n\n\nNov 29, 2018\n\n\nArt Steinmetz\n\n\n\n\n\n\n  \n\n\n\n\nNew Winter Sports for New Countries\n\n\n\n\n\n\n\nweb scraping\n\n\nsports\n\n\n\n\n\n\n\n\n\n\n\nFeb 26, 2018\n\n\nArt Steinmetz\n\n\n\n\n\n\n  \n\n\n\n\nLive Fast, Die Young, Stay Pretty?\n\n\n\n\n\n\n\nmusic\n\n\nweb scraping\n\n\nhealth\n\n\ngapminder\n\n\n\n\n\n\n\n\n\n\n\nFeb 11, 2018\n\n\nArt Steinmetz\n\n\n\n\n\n\n  \n\n\n\n\nPlumbing the Depths of My Soul (in Facebook)\n\n\n\n\n\n\n\ntext mining\n\n\nfacebook\n\n\n\n\n\n\n\n\n\n\n\nNov 25, 2017\n\n\nArt Steinmetz\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2023-06-09-kakhovka-dam/index.html#modeling-the-disaster",
    "href": "posts/2023-06-09-kakhovka-dam/index.html#modeling-the-disaster",
    "title": "Kakhovka Dam Disaster",
    "section": "Modeling the Disaster",
    "text": "Modeling the Disaster\nLast week, as water poured through the gap where the Kakhovka dam used to be, water levels surged downstream. This was a rolling disaster, with the river delta at the Black Sea seeing the flow last. We can make a rough attempt to visualize the effect of the rising water with an animated inundation map. This is a pretty sophisticated undertaking. Fortunately, there are tools in the form of R packages that have been developed in the last several years that make it easy for anyone to make inundation maps. There are many pieces of the project below where I can not believe how few lines of code are needed.\nLet’s see how easy it is.\n\nGet the Lower Dnipro River.\nAs usual, we load the required packages. Then I just looked at Google Maps to find the coordinates of a region spanning from the Kakhovka dam in the east to the Dnipro delta in the west. Since they were displayed in degrees, minutes and seconds, I wrote a quickie function to convert them to decimal. Note that longitude west of zero and latitude south of zero are expressed as negative, neither of which is true here. Longitudes in the United States, for instance, have a negative sign.\n\nlibrary(tidyverse)\n# GIS packages\nlibrary(elevatr)\nlibrary(rayshader)\nlibrary(sf)\nlibrary(raster)\nlibrary(leaflet)\nlibrary(osmdata)\nlibrary(basemaps)\n# Make GIFs\nlibrary(magick)\n\ndms_to_dec &lt;- function(deg=0, min=0, sec=0) {\n  return(deg + min / 60 + sec / 3600)\n}\nkh_loc &lt;- data.frame(lat = c(dms_to_dec(46,51,00),dms_to_dec(46,18,00)),\n                             lon= c(dms_to_dec(32,09,00),dms_to_dec(33,25,00)) )\n\nHere is the first “wow, that was easy” moment. We can confirm our coordinates by quickly pulling in a map with multiple layers, one for geographic names, and one for the satellite image. This is done with the leaflet package.\n\nleaflet() |&gt; \n  fitBounds(kh_loc$lon[1],kh_loc$lat[1],kh_loc$lon[2],kh_loc$lat[2]) |&gt; \n  addProviderTiles(providers$Esri.WorldImagery) |&gt; \n  addProviderTiles(providers$CartoDB.PositronOnlyLabels,\n                   options = providerTileOptions(opacity = 1))\n\n\n\n\n\nThis is an interactive map. We can pan and zoom to our heart’s content. There are some interesting observations we can make. The dam is at the northeast corner of the image. We can see the swampy lowlands below the dam. They lie mainly to the south of the primary course of the river. Notice the crop circles to the east and south of the reservoir. There are many visible if we pan a bit to the east. This tells us that the crops grown there are irrigated by water pumped to center-pivot sprinkler systems. Presumably the water comes from the reservoir which is now disappearing.\n\nsource: iStock\nJust to the east of the dam we also see the Crimean canal stretching south, which is a major source of fresh water for the Crimean peninsula. This, too, will cease to function.\n\n\nGet the Elevations\nWe are interested in modeling which parts of the river basin got submerged after the destruction of the dam. Obviously we need to know the elevation of the land. Using the elevatr package it only takes one line of code to retrieve a topographic map from the OpenTopography data set. This gets us a raster object that contains a matrix with elevations at each point. It also contains metadata with the coordinate system.\n\nkherson_dnipro &lt;- kh_loc |&gt; \n  st_as_sf(coords = c(\"lon\",\"lat\"),crs = 4326)\n\n# get the topo matrix\nkherson_elev &lt;- get_elev_raster(kherson_dnipro, \n                                src = \"gl1\", \n                                clip = \"bbox\",\n                                verbose = FALSE,\n                                serial=TRUE) \n\n\nDownloading: 8.2 kB     \nDownloading: 8.2 kB     \nDownloading: 41 kB     \nDownloading: 41 kB     \nDownloading: 74 kB     \nDownloading: 74 kB     \nDownloading: 98 kB     \nDownloading: 98 kB     \nDownloading: 140 kB     \nDownloading: 140 kB     \nDownloading: 170 kB     \nDownloading: 170 kB     \nDownloading: 170 kB     \nDownloading: 170 kB     \nDownloading: 210 kB     \nDownloading: 210 kB     \nDownloading: 260 kB     \nDownloading: 260 kB     \nDownloading: 310 kB     \nDownloading: 310 kB     \nDownloading: 360 kB     \nDownloading: 360 kB     \nDownloading: 380 kB     \nDownloading: 380 kB     \nDownloading: 400 kB     \nDownloading: 400 kB     \nDownloading: 400 kB     \nDownloading: 400 kB     \nDownloading: 440 kB     \nDownloading: 440 kB     \nDownloading: 470 kB     \nDownloading: 470 kB     \nDownloading: 500 kB     \nDownloading: 500 kB     \nDownloading: 520 kB     \nDownloading: 520 kB     \nDownloading: 520 kB     \nDownloading: 520 kB     \nDownloading: 560 kB     \nDownloading: 560 kB     \nDownloading: 620 kB     \nDownloading: 620 kB     \nDownloading: 640 kB     \nDownloading: 640 kB     \nDownloading: 700 kB     \nDownloading: 700 kB     \nDownloading: 750 kB     \nDownloading: 750 kB     \nDownloading: 760 kB     \nDownloading: 760 kB     \nDownloading: 810 kB     \nDownloading: 810 kB     \nDownloading: 810 kB     \nDownloading: 810 kB     \nDownloading: 900 kB     \nDownloading: 900 kB     \nDownloading: 910 kB     \nDownloading: 910 kB     \nDownloading: 950 kB     \nDownloading: 950 kB     \nDownloading: 980 kB     \nDownloading: 980 kB     \nDownloading: 990 kB     \nDownloading: 990 kB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.2 MB     \nDownloading: 1.2 MB     \nDownloading: 1.2 MB     \nDownloading: 1.2 MB     \nDownloading: 1.3 MB     \nDownloading: 1.3 MB     \nDownloading: 1.4 MB     \nDownloading: 1.4 MB     \nDownloading: 1.4 MB     \nDownloading: 1.4 MB     \nDownloading: 1.5 MB     \nDownloading: 1.5 MB     \nDownloading: 1.6 MB     \nDownloading: 1.6 MB     \nDownloading: 1.6 MB     \nDownloading: 1.6 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.9 MB     \nDownloading: 1.9 MB     \nDownloading: 1.9 MB     \nDownloading: 1.9 MB     \nDownloading: 2 MB     \nDownloading: 2 MB     \nDownloading: 2 MB     \nDownloading: 2 MB     \nDownloading: 2 MB     \nDownloading: 2 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.2 MB     \nDownloading: 2.2 MB     \nDownloading: 2.2 MB     \nDownloading: 2.2 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.6 MB     \nDownloading: 2.6 MB     \nDownloading: 2.7 MB     \nDownloading: 2.7 MB     \nDownloading: 2.7 MB     \nDownloading: 2.7 MB     \nDownloading: 2.7 MB     \nDownloading: 2.7 MB     \nDownloading: 2.8 MB     \nDownloading: 2.8 MB     \nDownloading: 2.9 MB     \nDownloading: 2.9 MB     \nDownloading: 2.9 MB     \nDownloading: 2.9 MB     \nDownloading: 2.9 MB     \nDownloading: 2.9 MB     \nDownloading: 2.9 MB     \nDownloading: 2.9 MB     \nDownloading: 3 MB     \nDownloading: 3 MB     \nDownloading: 3 MB     \nDownloading: 3 MB     \nDownloading: 3.1 MB     \nDownloading: 3.1 MB     \nDownloading: 3.1 MB     \nDownloading: 3.1 MB     \nDownloading: 3.2 MB     \nDownloading: 3.2 MB     \nDownloading: 3.2 MB     \nDownloading: 3.2 MB     \nDownloading: 3.2 MB     \nDownloading: 3.2 MB     \nDownloading: 3.3 MB     \nDownloading: 3.3 MB     \nDownloading: 3.3 MB     \nDownloading: 3.3 MB     \nDownloading: 3.3 MB     \nDownloading: 3.3 MB     \n\nkherson_elev\n\nclass      : RasterLayer \ndimensions : 1980, 4560, 9028800  (nrow, ncol, ncell)\nresolution : 0.0002777778, 0.0002777778  (x, y)\nextent     : 32.14986, 33.41653, 46.30014, 46.85014  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs \nsource     : memory\nnames      : file571c64e2c39 \nvalues     : -51, 107  (min, max)\n\n\nA quick and dirty plot of the matrix shows the flood situation. Bright green is high ground. The blue isn’t necessarily water, just water and land very nearly at sea level. The color scale is in meters above sea level. South of the river are mostly very low-lying areas. Notably, these areas are Russian controlled today. The north side is in Ukrainian hands.\n\npal &lt;- colorRampPalette(c(\"darkblue\",\"limegreen\"))\nplot(kherson_elev, col = pal(10))\n\n\n\n\nNow let’s create a more realistic view of the ground and show the rising water. To do this we’ll use the rayshader package. When Tyler Morgan-Wall released this package a few years ago, he opened up huge visualization vistas to the R community. We will just be touching the surface of its capabilities here. We’ll use two key features, the ability to shade the surface for a 3D effect and to detect and color bodies of water. Let’s exaggerate the z-axis a bit since this is generally very flat ground and we want to see subtle terrain changes. Like the ggplot2 package, we can start with a base plot and add layers.\n\nkh_elmat &lt;- raster_to_matrix(kherson_elev)\nbase_map &lt;- kh_elmat |&gt; \n  sphere_shade(texture = \"imhof1\",zscale = .8)\n\nbase_map |&gt; \n  add_water(detect_water(kh_elmat),color=\"desert\") |&gt; \n  plot_map()\n\n\n\n\nWe can clearly see the reservoir in the east, the delta in the west, the (exaggerated) canyons carved by the Dnipro tributaries and the narrow river connecting them.\n\n\nThe Human Dimension\nWhat we don’t see are where the people are and this tragedy is very much a human one. We can get a sense of human presence by creating a road overlay using OpenStreetMap data. Again, the code needed to do this is trivially simple. Note the returned object has several layers but we are only interested in the osm_points.\n\nkherson_roads &lt;- osmdata::opq(st_bbox(kherson_dnipro)) %&gt;% \n   osmdata::add_osm_feature(\"highway\") %&gt;% \n   osmdata::osmdata_sf() \n \n# Take just the road layer and transform coordinates to our existing projection\nkherson_lines &lt;- sf::st_transform(kherson_roads$osm_lines,\n                                  crs = raster::crs(kherson_dnipro))\n\n# a rayshader object we pre-generate now for speed later\nroads &lt;-  generate_line_overlay(\n  kherson_lines,\n  heightmap = kh_elmat,\n  extent = extent(extent(kherson_dnipro)),\n  linewidth = 2\n)\n\nkherson_roads\n\nOnce again we do a quick and dirty plot to visualize the new layer. This is also super easy with the geom_sf geom in ggplot2.\n\n# View streets as a ggplot2 render \nggplot(kherson_lines, aes(color = osm_id)) + \n  geom_sf() +\n  theme(legend.position = \"none\") +\n  labs(title = \"Kherson Roads from Open Street Map\")\n\n\n\n\n\n\nAdd More Realism\nLet’s overlay a satellite image to lend more realism to the image. In particular this lets us see the individual farms. Once again, the task is trivially easy using the basemaps package and the freely available ESRI “World Imagery” maps. This is the same image we saw at the beginning of this project but now saved as a “PNG” file. Rayshader will automatically scale the image to match the other layers in the map.\n\n# get image overlay\nsatview &lt;- basemap_png(\n  ext = kherson_dnipro,\n  map_service = \"esri\",\n  map_type = \"world_imagery\",\n  map_res = NULL,\n  verbose = TRUE,\n  browse = FALSE\n)\n\nLoading basemap 'world_imagery' from map service 'esri'...\n\n\n\n\nVisualize the Rising Water\nWhen we put it all together, what do we get?\n\nbase_map &lt;- base_map |&gt;\n  add_overlay(satview)\n\nbase_map |&gt;\n  add_water(detect_water(kh_elmat), color = \"desert\") |&gt;\n  add_overlay(roads)|&gt;\n  plot_map()\n\n\n\n\nWe can see the city of Kherson on the north side, the settlements on the south side, mostly out of the swampy areas along the river and, on the upper east side, the town of Nova Kakhovka where the dam and hydroelectric station were.\nUsing this as a base, let’s create a function that shows the impact of rising water levels. Rayshader will color totally flat areas as water so we mimic rising water by setting the elevations of any point below the rising water level to zero. We can iterate by setting the water level higher and higher to put more of the land “under water.”\nWe have several layers in this map. The shading, the satellite view, the water level and the streets. Order matters. The shading gets obscured by the satellite image. The rising water covers the satellite image. The streets are drawn last and remain visible so we can see just where human-occupied areas are being flooded. All these are aesthetic choices.\n\n\n\n\n\n\nNote:\n\n\n\nAt this point we should be clear about what this is and isn’t. The method we use here more properly would model rising sea levels. We don’t know exactly how the water affected each area at what time. We don’t know what the peak inundation level was for each area. Further, once the reservoir empties out, the water will recede. Let’s call this a “dramatization.” This does give a dramatic view of the scope of the destruction.\n\n\nThe function below will render a view of our map with a water level rise of zero though eight meters. Again, this doesn’t assume the water rose eight meters, only that it reached eight meters above sea level. That means land at an altitude of seven meters will be one meter underwater for an eight meter water rise. We save each a single image for each meter of water rise and speed things up by changing only the parts of the map which change with the water level.\n\nplot_rising_water &lt;- function(water_level = 0) {\n\n  # adjust elevations to simulate water\n  flood_elmat &lt;- ifelse(kh_elmat &lt; water_level, 0, kh_elmat)\n  \n  base_map |&gt;\n    add_water(detect_water(flood_elmat), color = \"desert\") |&gt;\n    # add roads on top of water\n    add_overlay(roads) |&gt;\n    save_png(\n      filename = paste0(\"img/frames/flood_\", \n                        formatC(water_level, width = 3, flag = \"0\"), \".png\"),\n      title_text = paste0(\n        \"Flood Inundation of the Dnipro\\nAfter Kakhovka Dam Destruction\\nWater Level:\",\n        formatC(water_level, width = 3, flag = \" \"),\n        \" Meters\"\n      ),\n      title_size = 60,\n      title_bar_color = \"white\"\n    )\n  \n  \n}\n# generate frames\n0:8 |&gt; walk(plot_rising_water)\n\nNow that we have saved nine still frames we can animate them into a short GIF file with almost no work at all. There are many ways to save a GIF animation with R. Here we use the magick package because we can create a smooth morph between frames which simulates rising water well.\n\n\n\n\n\n\nNote:\n\n\n\nWe use magick::image_resize() to downscale the individual frames to get a GIF of manageable size. Careful readers might wonder why we didn’t earlier downscale the elevation matrix instead. That would have sped up all the operations above. Unfortunately, that would make the flooded regions look very blocky as we would lose too much terrain data.\n\n\n\n# make GIF\ntarget_dir &lt;- \"img/frames\"\nfnames &lt;- paste0(\"img\\\\frames\\\\\", dir(\"img/frames\"))\nimage_read(fnames[1:9]) |&gt; \n  image_resize(\"1000x\") |&gt; \n  image_morph() |&gt; \n  image_animate() |&gt; \n  image_write(path = \"img/flood.gif\",format = \"gif\")\n\n\nWhile we don’t know what the maximum water height was or if all of the specific areas shown above got inundated but we do know many did and this clearly shows the vulnerable areas and where people have been potentially displaced."
  }
]